[{"categories":["GNU/Linux"],"content":"Keterkaitan dan validasi pengguna GNU/Linux dengan sikap Elitisme","date":"2021-03-23","objectID":"/linux-dan-elitisme/","tags":["General","Environment"],"title":"Linux dan Elitisme","uri":"/linux-dan-elitisme/"},{"categories":["GNU/Linux"],"content":"Ada sebuah anggapan di lingkup pengguna komputer bahwa GNU/Linux user mempunyai sikap elitis dan berpikir bahwa mereka lebih baik daripada orang lain yang tidak menggunakan distro GNU/Linux. Untuk mengetahui apakah seseorang itu elitis atau tidak, ada kriteria yang perlu kita perhatikan tentang bagaimana user ini beropini tentang dirinya sendiri dan user lainnya. ","date":"2021-03-23","objectID":"/linux-dan-elitisme/:0:0","tags":["General","Environment"],"title":"Linux dan Elitisme","uri":"/linux-dan-elitisme/"},{"categories":["GNU/Linux"],"content":"Prolog Mungkin dari kita semua pernah merasa seperti dipaksa lalu merasa bingung atau tidak mengerti mengenai apa yang diucapkan seseorang, entah itu dari internet maupun secara langsung. Meskipun begitu, ada juga orang yang tidak peduli terhadap ucapan tersebut. Misalnya, Si A pernah berkata “Udahlah, objek X bloated, insecure, dan non-FLOSS. Pakai Y saja.” dan sebagainya. Apakah itu dapat dianggap suatu perilaku pemaksaan? Belum tentu, itu bisa kita anggap sebagai tindakan persuasif yang harus kita olah sebijak mungkin dengan mencari tahu sumber referensi yang jelas dan tentunya sesuai kebutuhan setiap individu melalui berbagai riset. Informasi Sebelum lebih lanjut, saya tegaskan bahwa di bawah ini yang dimaksud sebuah sistem operasi GNU/Linux (atau sering disebut Linux) sebenarnya dikemas sebagai distribusi Linux. Lihat juga kernel Linux. ","date":"2021-03-23","objectID":"/linux-dan-elitisme/:1:0","tags":["General","Environment"],"title":"Linux dan Elitisme","uri":"/linux-dan-elitisme/"},{"categories":["GNU/Linux"],"content":"Linux dan Elitisme “Linux dan Elitisme”. Apakah keduanya memiliki keterkaitan satu sama-lain? Mengapa begitu banyak pengguna sistem operasi Linux mempunyai sikap elitis? Memang, pada beberapa aspek pengguna sistem operasi Linux dapat disebut sebagai elit. Berdasarkan data statistik dari gs.statcounter.com, kurang dari 2% di dunia yang menggunakan sistem operasi Linux di platform desktop, sedangkan jika disaring dalam semua platform mereka hanya kurang dari 1%. Itu adalah fakta bukan sebuah sikap saja. Android juga menggunakan mainstream kernel Linux, tetapi ditambahkan driver maupun fitur untuk perangkat spesifik sehingga dibedakan kategorinya. Biasanya driver/fitur tambahan tersebut akan diterapkan ke kernel Linux jika komunitas menyetujuinya dan memang mungkin untuk memodifikasinya. Rata-rata mereka lebih terampil, menguasai dan memiliki pengetahuan mendalam mengenai komputer daripada pengguna sistem operasi lain karena seringnya mencari dan membaca serta mengolah informasi. Mayoritas dari mereka sadar akan seluk-beluk dalam sistem operasi yang jarang terdengar. Contohnya HFS (Hierarchical File System), init system, user-group permission, kernel, bootloader, package manager, process scheduling, desktop environment, dan masih banyak lagi. Pada awalnya sistem operasi Linux banyak digunakan untuk keutamaan seperti kegiatan ilmiah eksperimen DØ yang menggunakan Scientific Linux, server produksi, seorang penghobi, programmer/developer, engineer, pentester. Bahwa berarti pada awalnya Linux bukanlah untuk mayoritas konsumsi rumahan. Namun, sekarang sistem operasi Linux sudah berusaha dikembangkan secara pesat (karena open-source) untuk konsumsi publik yang lebih ramah pengguna. Pengguna sistem operasi linux yang AVID biasanya tidak melihat pragmatisme dari kebanyakan pengguna biasa. Mereka sangat terpesona dan penasaran sehingga ingin untuk mampu memodifikasi setiap hal kecil di sistem operasi yang mereka gunakan setiap harinya. Tidak semua pengguna komputer memenuhi beberapa aspek di atas. Dengan demikian, pengguna sistem operasi Linux dapat dianggap sebagai Elit dan memiliki hak untuk membedakan diri dari mayoritas pengguna komputer meskipun tidak dengan sombong. Namun, pada kenyataannya sikap elitisme adalah suatu kesalahpahaman yang besar. Itu sama sekali tidak memiliki keterkaitan dengan penggunaan sistem operasi Linux sama sekali, tetapi berasal dari ketidaksepakatan mendasar dengan pola pikir dan cara komputasi terhadap komputer modern. ","date":"2021-03-23","objectID":"/linux-dan-elitisme/:2:0","tags":["General","Environment"],"title":"Linux dan Elitisme","uri":"/linux-dan-elitisme/"},{"categories":["GNU/Linux"],"content":"Opini Jadi bagaimana pendapat saya tentang user sistem operasi lain? Ini sedikit mengejutkan, sebetulnya saya tidak berpikir bahwa pengguna sistem operasi lain benar-benar bodoh atau IQ-nya lebih rendah daripada pengguna sistem operasi Linux. Saya juga tidak berpikir bahwa pengguna sistem operasi Linux adalah seorang jenius yang hidup diantara orang-orang bodoh, walaupun terkadang kenyataannya begitu. Jika kita mau melihat pada data perkembangan IQ di masa lampau hingga masa kini, kita dapat memperhatikan bahwa rata-rata IQ meningkat pada setiap populasi manusia. Kita melihat bahwa literasi semakin meningkat, matematika yang kompleks menjadi lebih “biasa”, setiap orang memiliki smartphone dan punya akses ke hampir seluruh teknologi hanya dengan menggerakkan jari mereka. Fakta-fakta ini membuat saya ragu, bahwa apakah semua orang di luar pengguna sistem operasi Linux itu bodoh atau mempunyai IQ rendah. Jadi apa yang menyebabkan mereka tidak elit? Apatis, apatisme menjadi sangat biasa dan dinormalisir jika dibandingkan pada masa lalu, ini disebabkan oleh semua kemudahan yang bisa diakses oleh orang-orang sampai mereka tidak peduli tentang apapun, mereka tidak mau berusaha, mereka lebih memilih mencari dopamine, seperti film porno, sosial media, menggemari idola, video game, hingga sumber-sumber dopamine lainnya untuk menjadi santapan otak sehari-hari. Otak mereka sudah terlalu penuh untuk melakukan hal lainnya yang sedikit lebih sulit. ","date":"2021-03-23","objectID":"/linux-dan-elitisme/:3:0","tags":["General","Environment"],"title":"Linux dan Elitisme","uri":"/linux-dan-elitisme/"},{"categories":["GNU/Linux"],"content":"It Just Werks It Just WerksIt Just Werks \" It Just Werks Saya menolak semua pernyataan “yang penting bisa digunakan” dan menganggapnya sebagai kata-kata yang bodoh, yang diberikan seseorang ketika tidak mau repot-repot menggerakkan tubuh dan akal sehatnya. Bukan karena suka dengan sesuatu yang rumit, tetapi saya menginginkan agar sesuatu bekerja seperti apa yang saya harapkan. Sejujurnya, saya juga tidak ingin mereka menggunakan objek Y karena dipaksakan. Berusaha sekuat tenaga sebagai orang-orang yang hidup di realitas alternatif dari apa yang disebut software piracy, dan berusaha tidak peduli terhadap apapun selama itu disebut “yang penting bisa dipakai”. Ketika manusia telah memiliki basic needs, seperti tempat tinggal, air, dan makanan di perut mereka, mereka tidak lagi memikirkan cara bertahan hidup dan ekstensinya. Ketika mereka telah mencapai kenyamanan itu, tanpa deeper meaning atau goal untuk memicu mereka, mereka akan menjadi apatis. Apatisme inilah yang menyebabkan orang-orang berkata bahwa instalasi Linux itu sulit, padahal belum tentu sesulit itu. Tapi karena sekarang kita hidup di masa mesin-mesin OEM, dimana Cortana melakukan semuanya untuk pengguna setelah membelinya dari toko. Tapi yah memang benar bahwa sistem operasi Linux sedikit banyak lebih sulit dibandingkan dengan itu. ","date":"2021-03-23","objectID":"/linux-dan-elitisme/:3:1","tags":["General","Environment"],"title":"Linux dan Elitisme","uri":"/linux-dan-elitisme/"},{"categories":["GNU/Linux"],"content":"Analogi Apakah pengguna Linux adalah Elit?Apakah pengguna Linux adalah Elit? \" Apakah pengguna Linux adalah Elit? Mari coba membayangkan, seumpama sistem operasi adalah mobil. Ada dua macam orang yang membeli mobil yang berbeda. Ayo sejenak berasumsi performance mobilnya sama (iya saya tahu bahwa Linux jauh memiliki performance yang lebih bagus daripada sistem operasi W, tapi mari anggap saja begitu dulu). Yang satu terus-terusan merekam obrolan pengguna, musik, makanan favorit, tujuan pergi dan semua datanya dikirim ke dealer untuk kepentingan penjualan (misalnya iklan). Dan juga, user tersebut tidak diperbolehkan mengganti komponen mobilnya, user tidak dapat memodifikasi mobil tersebut untuk memaksimalkan potensinya, jika ingin lebih maka harus membeli mobil baru. Sedangkan lawannya adalah sebuah mobil DIY (iya saya mengerti jika Linux belum tentu serumit itu, tapi mari anggap saja begitu terlebih dahulu), mobil tersebut bebas dimodifikasi, tanpa ada proses-proses yang membuat mobil itu lebih payah performance-nya. Jadi dari analogi diatas, sepertinya memang semakin memvalidasi elitisme pengguna sistem operasi Linux, mereka menggunakan OS yang elit, mereka berjam-jam untuk melakukan konfigurasi OS. Dan yang terpenting, mereka took action dengan melalui itu semua. Tidak seperti pengguna sistem operasi lain yang terus-menerus hanya bisa disuapi. Tidak semua orang mempunyai skill-set itu, beberapa orang terbukti lebih superior daripada orang lain dan tidak semua orang adalah equal walapun mayoritas media hingga masyarakat kita mengatakan itu. Paham bahwa semua orang itu setara hanyalah opini juga, karena beberapa orang terbukti lebih baik dalam suatu hal tertentu atau bahkan dalam banyak hal sekaligus daripada orang lain. ","date":"2021-03-23","objectID":"/linux-dan-elitisme/:3:2","tags":["General","Environment"],"title":"Linux dan Elitisme","uri":"/linux-dan-elitisme/"},{"categories":["GNU/Linux"],"content":"Epilog Apapun yang kita lakukan, jika hanya untuk menjadi “keren” atau “ikut-ikutan” tetapi sulit dalam menyesuaikan lingkungan. Sesungguhnya itu tidaklah keren, melainkan menyakiti diri sendiri. Marilah mencoba berbagai hal yang kita temui jika itu bermanfaat bagi individu masing-masing. Permasalahannya adalah seberapa banyak orang dapat meluangkan waktu mereka untuk melakukan hal-hal seperti itu dengan tepat dan cepat. ","date":"2021-03-23","objectID":"/linux-dan-elitisme/:4:0","tags":["General","Environment"],"title":"Linux dan Elitisme","uri":"/linux-dan-elitisme/"},{"categories":["GNU/Linux"],"content":"Referensi www.linuxsec.org/2021/03/linux-dan-elitisme.html www.distrotube.com/blog/why-linux-users-have-elitist-attitude www.youtube.com/watch?v=TxDFjGPqYog ","date":"2021-03-23","objectID":"/linux-dan-elitisme/:5:0","tags":["General","Environment"],"title":"Linux dan Elitisme","uri":"/linux-dan-elitisme/"},{"categories":["Automation"],"content":"Deploy Ansible AWS di CentOS 8 sebagai alternatif Ansible Tower","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"AWX adalah perangkat lunak berbasis web yang digunakan sebagai user interface dan penyedia REST API untuk engine Ansible. AWX merupakan versi upstream dari Ansible Tower, sama seperti biasanya Red Hat selalu mewujudkan representatif layanan berbayarnya dengan project - project open source sebagai development version. Jika Ansible Tower membutuhkan biaya untuk subscription, maka AWX sama sekali tidak dipungut biaya. ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:0:0","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Ansible AnsibleAnsible \" Ansible Ansible adalah perangkat lunak open source yang digunakan untuk melakukan software provisioning, configuration management, dan application deployment terhadap infrastruktur. Sederhananya, Ansible merupakan bentuk dari Infrastructure as Code, yang pakai untuk melakukan konfigurasi infrastruktur secara otomatis. Dalam pengoperasiannya, sering kali digunakan sebuah markup script YAML yang disebut sebagai Playbook atau dapat juga langsung dieksekusi sebagai Ad-Hoc saja. Semua hal tersebut pada umumnya dilakukan dalam perintah berbasis teks (CLI). Ansible juga terkenal karena agentless, artinya kita tidak perlu melakukan instalasi agent atau program apapun di perangkat infrastruktur yang akan dikelola. Untuk informasi lebih lanjut terkait Ansible silahkan baca di docs.ansible.com. ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:1:0","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Contoh Kasus Sebagai contoh misalkan kita memiliki tugas untuk mengganti nameserver menjadi 8.8.8.8 pada puluhan hingga ratusan server. Pada proses tradisional, kita akan melakukan login (misalnya melalui SSH) kemudian memanipulasi file /etc/resolv.conf pada masing - masing server, tentu saja mengulang-ulang tugas yang sama adalah hal membosankan. Mungkin kita bisa berusaha membuat sebuah shell script (misalnya bash) yang dijalankan sebagai program untuk melakukan itu semua, tapi tidak semua orang mau melakukan effort tersebut. Maka kita dapat menggunakan Ansible sebagai solusi, cukup install Ansible pada Control Node yang dapat terkoneksi dengan list server. Kemudian memasukkan seluruh list hostname atau alamat IP server ke dalam file inventory, dan menjalankan Ansible Ad-Hoc berisi instruksi perintah untuk mengganti isi file /etc/resolv.conf lalu masalah terselesaikan. Sedangkan untuk tugas yang lebih rumit kita dapat menulisnya ke dalam script YAML untuk kemudian dieksekusi dengan Ansible Playbook. Ansible PlaybookAnsible Playbook \" Ansible Playbook ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:1:1","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Prerequisites Sebelum melanjutkan lebih jauh, pastikan sudah memenuhi beberapa prasyarat berikut. ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:2:0","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"System Requirements Untuk mendapatkan performa yang baik saat pertama kali melakukan deployment, setidaknya dibutuhkan spesifikasi seperti berikut. 4 GB Memory 2 Core CPU 20 GB Storage Saya akan menggunakan VM Guest CentOS 8 sebagai Control Node. Namun jika ingin menggunakan CentOS 7 setidaknya gunakan CentOS 7.7 atau versi lebih baru. Perhatian Dalam artikel ini saya akan mengeksekusi seluruh perintah dengan menggunakan user root. ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:2:1","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Disable SELinux Untuk sementara saya merubah SELinux menjadi permissive agar proses deployment berjalan lancar. sed -i 's/^SELINUX=.*/SELINUX=permissive/g' /etc/selinux/config setenforce permissive ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:2:2","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"EPEL dan Extra Packages Jalankan perintah berikut ini. dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:2:3","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Instalasi Ansible Kita membutuhkan Ansible Engine versi 2.8 atau lebih baru. Jalankan perintah berikut ini. dnf install ansible ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:2:4","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Paket Tambahan Jalankan perintah berikut ini untuk memasang beberapa paket tambahan. dnf install git python3-pip curl \\ wget nodejs gettext lvm2 \\ device-mapper-persistent-data bzip2 ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:2:5","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Development Tools AWX membutuhkan beberapa paket lain dari group Development Tools untuk GNU Make. dnf group install \"Development Tools\" ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:2:6","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Docker dan Docker Compose Karena AWX akan dijalankan di container, by-default AWX menyarankan untuk memakai Docker CE. dnf config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo dnf install docker-ce docker-ce-cli containerd.io systemctl enable --now docker Lalu pasang docker-compose menggunakan pip3. pip3 install docker-compose Perhatian Jika tidak menggunakan user root maka tambahkan user tersebut ke dalam group docker kemudian logout dan login kembali. Menambahkan user ke dalam suatu grup dapat dilakukan dengan perintah sudo usermod -aG docker user ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:2:7","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Deploy AWX ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:3:0","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Clone Repository Periksa terlebih dahulu release yang tersedia dari remote repository AWX pada halaman releases. Kemudian jalankan clone dengan perintah berikut. git clone -b x.y.z https://github.com/ansible/awx.git Perhatian Untuk x.y.z adalah versi yang akan digunakan, misalnya pada halaman release terdapat versi 17.0.1. Melakukan clone tanpa definisi versi branch akan diarahkan langsung menuju branch HEAD yang berisi versi development, hal tersebut tidak disarankan karena sangat tidak stabil. ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:3:1","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Generate Secret Key Biasanya AWX membutuhkan Secret Key, kita dapat membuatnya menggunakan openssl yang sudah tersedia di CentOS 8. openssl rand -hex 32 Catat output yang dihasilkan dari perintah diatas. ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:3:2","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Edit Inventory Buka file inventory yang terdapat dalam direktori instaler AWX misalnya menggunakan vi. cd awx/installer vi inventory Cari dan edit beberapa baris yang ada seperti berikut. secret_key=\u003cSECRET_KEY\u003e admin_password=\u003cPASSWORD_AWX\u003e project_data_dir=/var/lib/awx/projects awx_official=true awx_alternate_dns_servers=\"8.8.8.8,8.8.4.4\" Perhatian Ganti SECRET_KEY dengan output yang tadi dihasilkan oleh openssl, dan ganti PASSWORD_AWX dengan password untuk login ke dalam user interface. ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:3:3","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Membuat Direktori Project Karena kita mengaktifkan variabel project_data_dir maka kita perlu membuat direktorinya juga. mkdir -p /var/lib/awx/projects Direktori tersebut nantinya akan berisi project yang akan kita gunakan dalam AWX. ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:3:4","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Konfigurasi Firewall Supaya AWX dapat diakses dari luar VM maka kita perlu melakukan beberapa konfigurasi firewall. firewall-cmd --zone=public --add-masquerade --permanent firewall-cmd --add-service=http --add-service=https --permanent firewall-cmd --reload ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:3:5","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Deployment Eksekusi file YAML bernama install.yml menggunakan ansible-playbook. ansible-playbook -i inventory install.yml Proses akan memakan waktu cukup lama hingga akhirnya selesai. Apabila tidak ada kendala maka akan muncul tampilan seperti berikut. PLAY RECAP **************************************************************************************** localhost : ok=21 changed=8 unreachable=0 failed=0 skipped=73 rescued=0 ignored=1 ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:3:6","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Post-Deployment Jangan lupa untuk mengembalikan kondisi SELinux menjadi enforcing dari yang tadinya telah kita manipulasi menjadi permissive. sed -i 's/^SELINUX=.*/SELINUX=enforcing/g' /etc/selinux/config setenforce enforcing ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:3:7","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Pengujian Periksa apakah ada container yang berjalan. docker ps Jika berhasil maka akan ada 4 container yang dalam status Up. 003389b920b6 ansible/awx:17.0.1 \"/usr/bin/tini -- /u...\" 7 minutes ago Up 7 minutes 8052/tcp awx_task 42d2ff79f8e1 ansible/awx:17.0.1 \"/usr/bin/tini -- /b...\" 7 minutes ago Up 7 minutes 0.0.0.0:80-\u003e8052/tcp awx_web 3e73bd538074 postgres:12 \"docker-entrypoint.s...\" 7 minutes ago Up 7 minutes 5432/tcp awx_postgres 94ee8bb7949b redis \"docker-entrypoint.s...\" 7 minutes ago Up 7 minutes 6379/tcp awx_redis Sekarang coba buka user interface AWX di Web Browser menggunakan alamat IP milik VM. Jika berhasil kita dapat melakukan login memakai username dan password yang sebelumnya telah kita isi pada file inventory. Login AWXLogin AWX \" Login AWX Dashboard AWXDashboard AWX \" Dashboard AWX AWX AboutAWX About \" AWX About ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:4:0","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Kesimpulan Berdasarkan FAQ (Frequently Asked Questions) dikatakan bahwa AWX sangat tidak dianjurkan untuk dipakai di production, namun jika untuk sekedar mempelajari fitur-fitur yang ada saya rasa AWX sudah cukup. Jika sudah terbiasa mengoperasikan AWX, kita bisa saja beralih untuk berlangganan Ansible Tower di production environment. Selama saya mencoba melakukan deployment AWX, saya melihat banyak sekali issue masih dalam status Open di repositori Github milik AWX. ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:5:0","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":["Automation"],"content":"Referensi docs.ansible.com/ansible/latest/user_guide/intro_getting_started.html github.com/ansible/awx/ www.ansible.com/overview/how-ansible-works www.ansible.com/community/awx-project www.ansible.com/products/awx-project/faq www.redhat.com/en/resources/awx-and-ansible-tower-datasheet ","date":"2021-02-04","objectID":"/deploy-ansible-awx-di-centos/:6:0","tags":["Ansible","AWX","Automation","CentOS"],"title":"Deploy Ansible AWX di CentOS","uri":"/deploy-ansible-awx-di-centos/"},{"categories":null,"content":"Tentang situs init.web.id dan alasannya dibangun","date":"2020-12-12","objectID":"/about/","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Bonjour! Saya Anwar seorang biasa pegiat GNU/Linux, serta jaringan komputer. Gemar belajar konfigurasi infrastruktur yang berkaitan dengan sistem komputasi, mendengarkan musik, menonton film, dan membaca. Seringkali hal yang jarang dilakukan akan mudah terlupakan, maka dibangunlah situs web ini untuk membantu merawat ingatan, bukan berbagi. Jika ternyata mampu membantu orang lain, itu cuma bonus saat belajar. Perhatian Situs web yang sedang terbuka ini hanyalah arsip pribadi yang berusaha ditulis sedemikian rupa supaya terlihat lebih teknis. Perlu diketahui, bahwa penulis tidak berharap setiap orang dapat memahaminya. Penulis sepenuhnya tidak bertanggung jawab atas segala kerugian atau kerusakan yang disebabkan oleh setiap konten dalam situs ini. Pembaca hendaknya lebih waspada dalam mempraktikan hal-hal dari internet. Seluruh konten yang tersedia pada situs web ini akan sepenuhnya gratis dan bebas untuk dibaca, disalin, serta disebarluaskan, hingga dapat dikembangkan pada media lain. Setiap artikel memiliki source code yang dapat diakses dari repository. Jika memiliki pertanyaan, atau urusan lain silahkan hubungi penulis melalui beberapa kontak berikut ini : Contact  Telegram  Twitter  Email ","date":"2020-12-12","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":["Blog"],"content":"Integrasi Github Pages dengan Cloudflare CDN untuk meningkatkan kecepatan load-time situs web.","date":"2021-01-30","objectID":"/integrasi-github-pages-dengan-cloudflare-cdn/","tags":["Cloudflare","Github","CDN","Review"],"title":"Integrasi Github Pages dengan Cloudflare CDN","uri":"/integrasi-github-pages-dengan-cloudflare-cdn/"},{"categories":["Blog"],"content":"Github Pages biasanya digunakan sebagai hosting untuk situs web dengan konten statis, maka diperlukan caching untuk mempercepat load-time. Cloudflare dapat dimanfaatkan sebagai CDN (Content Delivery Network) yang berfungsi untuk menyimpan cache apabila belum ada perubahan yang signifikan pada situs web. ","date":"2021-01-30","objectID":"/integrasi-github-pages-dengan-cloudflare-cdn/:0:0","tags":["Cloudflare","Github","CDN","Review"],"title":"Integrasi Github Pages dengan Cloudflare CDN","uri":"/integrasi-github-pages-dengan-cloudflare-cdn/"},{"categories":["Blog"],"content":"CDN CDN (Content Delivery Network) merupakan sekelompok server yang ditempatkan diberbagai lokasi untuk mendistribusikan konten situs web ke sejumlah wilayah geografis yang luas. Salah satu contohnya adalah Cloudflare, yang menyediakan beberapa layanan baik berbayar maupun bebas biaya seperti yang telah saya gunakan pada situs web ini. CDN bekerja untuk menyimpan cache dari Origin Server (misalnya server Github Pages) dan menyimpannya di berbagai CDN Server pada berbagai belahan dunia. Contohnya ketika pengguna dari benua Asia mencoba mengakses situs web yang dikenal memiliki basis server di benua Amerika, CDN Server yang terletak pada lokasi terdekat dengan penggunalah yang akan menjawab request pengguna tersebut. Bagaimana CDN BekerjaBagaimana CDN Bekerja \" Bagaimana CDN Bekerja ","date":"2021-01-30","objectID":"/integrasi-github-pages-dengan-cloudflare-cdn/:1:0","tags":["Cloudflare","Github","CDN","Review"],"title":"Integrasi Github Pages dengan Cloudflare CDN","uri":"/integrasi-github-pages-dengan-cloudflare-cdn/"},{"categories":["Blog"],"content":"Manfaat Cloudflare Selain mempercepat load-time situs web, terdapat beberapa manfaat lain yang dapat kita peroleh dengan mengintegrasikan Cloudflare pada situs web. Dengan menggunakan Cloudflare kita dapat lebih menghemat bandwith, meningkatkan keamanan server dari serangan DDoS dari pihak tidak bertanggung jawab, hingga memperoleh layanan SSL HTTPS terpercaya. Manfaat CloudflareManfaat Cloudflare \" Manfaat Cloudflare ","date":"2021-01-30","objectID":"/integrasi-github-pages-dengan-cloudflare-cdn/:1:1","tags":["Cloudflare","Github","CDN","Review"],"title":"Integrasi Github Pages dengan Cloudflare CDN","uri":"/integrasi-github-pages-dengan-cloudflare-cdn/"},{"categories":["Blog"],"content":"Prerequisites Sebelum melaksanakan beberapa langkah lebih lanjut, pastikan sudah memenuhi beberapa prasyarat berikut ini. Saya sudah memiliki akun Cloudflare dengan paket layanan bebas biaya, apabila belum memilikinya maka sebaiknya lakukan registrasi akun terlebih dahulu pada dash.cloudflare.com/sign-up. Memiliki akses registrar dari domain yang digunakan oleh situs web. Registrar akan kita gunakan untuk melakukan pointing menuju nameserver Cloudflare. Dalam artikel ini saya telah memiliki sebuah domain yang disediakan oleh DewaBiz.com. Sebuah situs web yang menggunakan Github Pages sebagai hosting. Contohnya seperti yang telah saya tulis pada artikel Custom APEX Domain untuk Github Pages. ","date":"2021-01-30","objectID":"/integrasi-github-pages-dengan-cloudflare-cdn/:2:0","tags":["Cloudflare","Github","CDN","Review"],"title":"Integrasi Github Pages dengan Cloudflare CDN","uri":"/integrasi-github-pages-dengan-cloudflare-cdn/"},{"categories":["Blog"],"content":"Nameserver Cloudflare ","date":"2021-01-30","objectID":"/integrasi-github-pages-dengan-cloudflare-cdn/:3:0","tags":["Cloudflare","Github","CDN","Review"],"title":"Integrasi Github Pages dengan Cloudflare CDN","uri":"/integrasi-github-pages-dengan-cloudflare-cdn/"},{"categories":["Blog"],"content":"Tambahkan Situs Web Login ke dalam halaman dashboard Cloudflare menggunakan akun yang sebelumnya telah dibuat. Kemudian tambahkan situs web dengan memasukkan alamat domainnya. Tambah Situs WebTambah Situs Web \" Tambah Situs Web Lalu pilih paket yang akan digunakan seperti berikut ini. Paket LayananPaket Layanan \" Paket Layanan ","date":"2021-01-30","objectID":"/integrasi-github-pages-dengan-cloudflare-cdn/:3:1","tags":["Cloudflare","Github","CDN","Review"],"title":"Integrasi Github Pages dengan Cloudflare CDN","uri":"/integrasi-github-pages-dengan-cloudflare-cdn/"},{"categories":["Blog"],"content":"Konfigurasi Nameserver Clouflare Setelah menambahkan situs web, kita perlu melaukan konfigurasi DNS kemudian kita akan mendapatkan sepasang nameserver seperti berikut ini. Konfigurasi Nameserverkonfigurasi-nameserver \" Konfigurasi Nameserver IP pada A records merupakan IP miliki Github yang saya dapatkan dari docs.github.com. 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 Yang perlu dicatat adalah nameserver yang telah kita dapatkan dari Cloudflare, seperti berikut. penny.ns.cloudflare.com sri.nds.cloudflare.com ","date":"2021-01-30","objectID":"/integrasi-github-pages-dengan-cloudflare-cdn/:3:2","tags":["Cloudflare","Github","CDN","Review"],"title":"Integrasi Github Pages dengan Cloudflare CDN","uri":"/integrasi-github-pages-dengan-cloudflare-cdn/"},{"categories":["Blog"],"content":"Registrar Domain Sekarang login ke dalam registrar domain kalian untuk merubah nameserver. Ubah Nameserver di RegistrarUbah Nameserver di Registrar \" Ubah Nameserver di Registrar Biasanya perubahan nameserver akan memakan waktu beberapa saat, sebaiknya tunggu terlebih dahulu sekitar 15 menit dan lakukan flush cache dns. ","date":"2021-01-30","objectID":"/integrasi-github-pages-dengan-cloudflare-cdn/:4:0","tags":["Cloudflare","Github","CDN","Review"],"title":"Integrasi Github Pages dengan Cloudflare CDN","uri":"/integrasi-github-pages-dengan-cloudflare-cdn/"},{"categories":["Blog"],"content":"Konfigurasi HTTPS Kita perlu mengaktifkannya terlebih dahulu pada menu SSL/TLS di dashboard Cloudflare. SSL/TLS CloudflareSSL/TLS Cloudflare \" SSL/TLS Cloudflare Kemudian masuk ke Settings pada Github Pages dan centang Enforce HTTPS Enforce HTTPSEnforce HTTPS \" Enforce HTTPS ","date":"2021-01-30","objectID":"/integrasi-github-pages-dengan-cloudflare-cdn/:5:0","tags":["Cloudflare","Github","CDN","Review"],"title":"Integrasi Github Pages dengan Cloudflare CDN","uri":"/integrasi-github-pages-dengan-cloudflare-cdn/"},{"categories":["Blog"],"content":"Konfigurasi Cache Ini adalah salah satu fitur yang paling dicari di Cloudflare, kita dapat menemukannya pada menu Caching. Di sini saya hanya mengaktifkan Caching Level seperti berikut. Caching LevelCaching Level \" Caching Level Untuk mengetahui lebih jelasnya kita dapat melihat kegunaan dari setiap properties tersebut pada dokumentasi resmi Cloudflare dari halaman support.cloudflare.com. ","date":"2021-01-30","objectID":"/integrasi-github-pages-dengan-cloudflare-cdn/:6:0","tags":["Cloudflare","Github","CDN","Review"],"title":"Integrasi Github Pages dengan Cloudflare CDN","uri":"/integrasi-github-pages-dengan-cloudflare-cdn/"},{"categories":["Blog"],"content":"Page Rules Selanjutnya buka Page Rules untuk membuat 3 rules baru bagi domain kita. Always Use HTTPS Forwarding URL Cache Level Page RulesPage Rules \" Page Rules Untuk menerapkan semua konfigurasi yang telah dibuat, saya menghapus semua cache yang telah tersimpan di Cloudflare dengan menggunakan Purge Everything pada menu Caching di dashboard Cloudflare. Purge EverythingPurge Everything \" Purge Everything ","date":"2021-01-30","objectID":"/integrasi-github-pages-dengan-cloudflare-cdn/:7:0","tags":["Cloudflare","Github","CDN","Review"],"title":"Integrasi Github Pages dengan Cloudflare CDN","uri":"/integrasi-github-pages-dengan-cloudflare-cdn/"},{"categories":["Blog"],"content":"Pengujian Untuk melakukan pengujian saya menggunakan perintah dig dan hasilnya sebagai berikut. $ dig init.web.id Jika registrar domain telah menggunakan nameserver Cloudflare maka akan muncul tampilan seperti berikut. Name Server:penny.ns.cloudflare.com Name Server:sri.ns.cloudflare.com Lalu jika SSL Cloudflare telah berhasil diterapkan, maka pada overview registrar domain DewaBiz.com akan menampilkan informasi berikut. Overview RegistrarOverview Registrar \" Overview Registrar ","date":"2021-01-30","objectID":"/integrasi-github-pages-dengan-cloudflare-cdn/:8:0","tags":["Cloudflare","Github","CDN","Review"],"title":"Integrasi Github Pages dengan Cloudflare CDN","uri":"/integrasi-github-pages-dengan-cloudflare-cdn/"},{"categories":["Blog"],"content":"Kesimpulan Dengan menggunakan nameserver milik Cloudflare saya merasa fitur Konfigurasi DNS yang terdapat pada registrar domain kini dapat dikelola melalui dashboard Cloudflare. Perubahan kecepatan load-time situs web memang benar-benar terasa. Kita dapat melihat analisis secara mudah lewat menu Analytics, serta menguji kecepatan situs web dengan fitur Speed pada dashboard Cloudflare. Di lain kesempatan saya ingin mencoba untuk bermigrasi ke Netlify untuk mereasakan perbandingannya. ","date":"2021-01-30","objectID":"/integrasi-github-pages-dengan-cloudflare-cdn/:9:0","tags":["Cloudflare","Github","CDN","Review"],"title":"Integrasi Github Pages dengan Cloudflare CDN","uri":"/integrasi-github-pages-dengan-cloudflare-cdn/"},{"categories":["Blog"],"content":"Referensi en.wikipedia.org/wiki/Cloudflare blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare support.cloudflare.com/hc/en-us/articles/204144518-SSL-FAQ support.cloudflare.com/hc/en-us/articles/200168256-Understand-Cloudflare-Caching-Level docs.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site ","date":"2021-01-30","objectID":"/integrasi-github-pages-dengan-cloudflare-cdn/:10:0","tags":["Cloudflare","Github","CDN","Review"],"title":"Integrasi Github Pages dengan Cloudflare CDN","uri":"/integrasi-github-pages-dengan-cloudflare-cdn/"},{"categories":["Cloud"],"content":"Provisioning Kubernetes dengan Terraform dan Ansible di AWS menggunakan spesifikasi instance minimal.","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Kubernetes Vanilla atau versi Kubernetes orisinil merupakan aplikasi opensource untuk Container Orchestration dengan berbagai fleksibilitas yang dapat diintegrasikan lebih lanjut bersama komponen atau tools lain dari pihak ketiga. Berbeda dengan distribusi Kubernetes (seperti OpenShift dan OKD) yang menawarkan kemudahan dalam instalasi, Kubernetes (atau sering disebut k8s) seringkali membutuhkan effort yang lebih besar dalam membangun klaster-nya jika dilakukan secara manual tanpa layanan dari vendor atau cloud provider (seperti EKS atau GKS). Namun sebenarnya kita dapat melakukannya dengan lebih effortless menggunakan tools untuk provisioning infrastruktur maupun konfigurasi, seperti Terraform dan Ansible. ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:0:0","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Struktur Klaster Pada artikel ini saya akan membangun klaster Kubernetes yang terdiri dari satu Control Plane atau Master Node, serta dua Worker Node. Untuk pengelolaan container di dalam klaster saya akan menggunakan Docker. Infrastruktur akan didirikan di cloud provider AWS (Amazon Web Service). Klaster KubernetesKlaster Kubernetes \" Klaster Kubernetes ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:1:0","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Provisioning Provisioning dalam urusan cloud native sering dianggap sebagai proses menyediakan suatu layanan. Segala proses yang terjadi dalam menyediakan layanan tersebut dapat dilakukan secara manual, namun seiring berkembangnya zaman tentu saja kini banyak sekali tools yang bermunculan dan menawarkan kemampuan untuk membuat process automation. Misalnya pada artikel ini, Terraform akan digunakan untuk melakukan provisioning infrastruktur pada AWS. Sementara dalam melakukan konfigurasi atau setup setiap instance, Ansible Playbook adalah tools yang akan bertanggung jawab untuk melakukannya. Ansible Playbook akan melakukan beberapa proses mulai dari update sistem operasi, setup Docker, memasang kubelet, etcd, membuat token bagi worker node hingga berbagai keperluan setup k8s lainnya sampai selesai. ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:1:1","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Prerequisites Pastikan beberapa prasyarat berikut ini sudah terpenuhi sebelum melakukan tahap lebih lanjut. ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:2:0","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Access Key Untuk mendapatkan access key AWS, kita harus memiliki akun AWS. Access Key ini sama dengan yang biasanya digunakan sebagai credentials aws-cli, dan pada artikel ini access key tersebut akan dipakai oleh Terraform untuk mengeksekusi perintah sesuai dengan script yang kita buat. Untuk lebih lengkapnya silahkan lihat dokumentasi resmi AWS. Simpan access key tersebut ke dalam sebuah file, misalnya credentials seperti berikut ini. [default] aws_access_key_id=AKIA3ANXUSNAUATXXXXX aws_secret_access_key=+JDR1HWw4vrcFrLqbf+ewv/nJL/L6TlVAhwXXXXX ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:2:1","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"VPC Pada umumnya by-default AWS sudah memiliki VPC (Virtual Private Cloud), namun jika belum kita dapat membuatnya sendiri dengan perintah berikut. $ aws ec2 create-default-vpc --availability-zone us-east-1 Saya akan menggunakan default VPC Subnet yang sudah ada pada AWS. Namun jika belum ada maka kita dapat membuatnya sendiri seperti berikut. $ aws ec2 create-default-subnet --availability-zone us-east-1a Kita akan membutuhkan id dari Subnet VPC yang telah kita buat untuk tahap selanjutnya. $ aws ec2 describe-subnets --region us-east-1 Catat dan simpan id dari Subnet VPC yang telah kita buat. ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:2:2","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"SSH Key Buat sebuah SSH Key bagi instance AWS yang akan kita dirikan. Untuk membuatnya saya menggunakan aws-cli dengan perintah berikut. $ aws ec2 create-key-pair --region us-east-1 --key-name infra-k8s --query 'KeyMaterial' --output text \u003e infra-k8s.pem Nantinya perintah tersebut akan menghasilkan sebuah file SSH Key bernama infra-k8s.pem. Selanjutnya kita perlu merubah permissionnya supaya dapat digunakan untuk mengakses instance. $ chmod 400 infra-k8s.pem Info Dalam artikel ini saya menggunakan region us-east-1 atau North Virginia. Jika ingin menggunakan regional lain, silahkan lihat dokumentasi resmi AWS. ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:2:3","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Infrastructure Provisioning ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:3:0","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Pasang Paket Terraform Pasang paket terraform pada komputer lokal seperti berikut. $ sudo pacman -Sy terraform Info Saya menggunakan sistem operasi GNU/Linux dengan distro Arch-based yang memiliki package manager pacman. Silahkan sesuaikan dengan perintah package manager pada distro masing-masing. ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:3:1","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Script Terraform Selanjutnya silahkan buat file baru untuk menulis script terraform. Misalnya saya membuat file infra.tf yang akan berisi script Terraform seperti berikut ini. ## AWS Provider terraform { required_providers { aws = { source = \"hashicorp/aws\" version = \"~\u003e 3.0\" } } }## Init Credentials Profile and Region provider \"aws\" { profile = \"default\" region = \"us-east-1\" shared_credentials_file = \"credentials\" }## Public Security Group resource \"aws_security_group\" \"public-sec\" { name = \"public\" description = \"Public Server Security Group\"## SSH, HTTP, HTTPS Access ingress { from_port = 22 to_port = 22 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } ingress { from_port = 80 to_port = 80 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } ingress { from_port = 443 to_port = 443 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] }## Kubernetes Cluster ingress { from_port = 6443 to_port = 6443 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } ingress { from_port = 2379 to_port = 2380 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } ingress { from_port = 10250 to_port = 10250 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } ingress { from_port = 10251 to_port = 10251 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } ingress { from_port = 10252 to_port = 10252 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [\"0.0.0.0/0\"] } tags = { Name = \"public\" Description = \"Public Server Security Group\" } }## Elastic IP for Public Instance resource \"aws_eip\" \"lb\" { instance = aws_instance.public.id }## Create Public Instance resource \"aws_instance\" \"public\" { ami = \"ami-00ddb0e5626798373\" instance_type = \"t2.medium\" source_dest_check = false key_name = \"infra-k8s\" subnet_id = \"subnet-0f5a08d3063a6b742\" private_ip = \"172.31.16.20\" vpc_security_group_ids = aws_security_group.public-sec.*.id tags = { Name = \"public\" }## Disk Space root_block_device { delete_on_termination = true encrypted = false iops = 100 volume_size = 10 } }## Node Security Group resource \"aws_security_group\" \"node-sec\" { name = \"node\" description = \"Node/Worker Security Group\"## SSH Access ingress { from_port = 22 to_port = 22 protocol = \"tcp\"## Close all traffic IP after setup! #cidr_blocks = [\"172.31.16.20/32\"] cidr_blocks = [\"0.0.0.0/0\"] }## Kubernetes Cluster ingress { from_port = 10250 to_port = 10250 protocol = \"tcp\" cidr_blocks = [\"172.31.16.20/32\"] } ingress { from_port = 10255 to_port = 10255 protocol = \"tcp\" cidr_blocks = [\"172.31.16.20/32\"] } ingress { from_port = 30000 to_port = 32767 protocol = \"tcp\" cidr_blocks = [\"172.31.16.20/32\"] } ingress { from_port = 3000 to_port = 3000 protocol = \"tcp\" cidr_blocks = [\"172.31.16.20/32\"] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [\"0.0.0.0/0\"] } tags = { Name = \"node\" Description = \"Node/Worker Security Group\" } }## Elastic IP for Node Server (Temporary) resource \"aws_eip\" \"lb-node\" { count = 2 instance = aws_instance.node[count.index].id }## Create Instance Node resource \"aws_instance\" \"node\" { ami = \"ami-00ddb0e5626798373\" instance_type = \"t2.small\" associate_public_ip_address = false source_dest_check = false key_name = \"infra-k8s\" subnet_id = \"subnet-0f5a08d3063a6b742\" vpc_security_group_ids = aws_security_group.node-sec.*.id count = 2 tags = { Name = \"node-${count.index + 1}\" }## Disk Space root_block_device { delete_on_termination = true encrypted = false iops = 100 volume_size = 10 } } Perhatian Sesuaikan variabel subnet_id dengan id Subnet VPC yang telah kita buat sebelumnya. Sedangkan variabel ami merupakan id dari Amazon Machine Image yang value nya tergantung dari distro apa yang akan kita jalankan pada setiap instance EC2 untuk informasi lebih lanjut kita dapat melihatnya dari dokumentasi resmi AWS karena setiap region dan distro hingga sistem operasi memiliki AMI ID yang berbeda-beda. Terlihat bahwa saya membuka seluruh traffic dari inbound dan outbound yang tentu saja tidaklah aman, sesuaikan dengan kebutuhan port Kubernetes pada umumnya. I","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:3:2","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Eksekusi Terraform Sekarang jalankan provisioning menggunakan terraform sesuai dengan script yang telah dibuat sebelumnya. $ terraform apply ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:3:3","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Configuration Provisioning ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:4:0","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Pasang Paket Ansible Pasang ansible pada komputer lokal menggunakan perintah berikut. $ sudo pacman -Sy ansible ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:4:1","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Konfigurasi Ansible Kita perlu membuat sebuah file bernama ansible.cfg yang berisi konfigurasi seperti berikut. [defaults] inventory = inventory Private_key_file = infra-k8s.pem remote_user = ubuntu ansible_python_interpreter = /usr/bin/python3 host_key_checking = false remote_tmp = /tmp/.ansible-${USER}/tmp Perhatian Variabel remote_user adalah user pada instance EC2 yang akan dipakai untuk penerapan provisioning, by-default pada AWS untuk AMI Ubuntu 18 menggunakan user ubuntu. Jika menggunakan AMI lain maka kita perlu menyesuaikannya. ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:4:2","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Inventory Ansible Playbook Jalankan perintah berikut untuk mendapatkan IP Publik dari Master Node. $ aws ec2 describe-instances \\ --region us-east-1 \\ --filters \"Name=tag-value,Values=public\" Jalankan perintah berikut untuk mendapatkan IP Publik dari Worker Node pertama. $ aws ec2 describe-instances \\ --region us-east-1 \\ --filters \"Name=tag-value,Values=node-1\" Jalankan perintah berikut untuk mendapatkan IP Publik dari Worker Node pertama. $ aws ec2 describe-instances \\ --region us-east-1 \\ --filters \"Name=tag-value,Values=node-2\" Kemudian masukan ketiga IP tersebut ke dalam file bernama inventory sehingga kurang lebih isinya akan menjadi seperti berikut. [public] 18.233.242.19 [nodes] 3.224.63.65 54.198.25.43 ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:4:3","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Docker Selanjutnya saya membuat file baru bernama docker.yml yang berisi script untuk melakukan update sistem operasi dan setup Docker. - hosts:allgather_facts:falsetasks:- name:Update \u0026 Upgradebecome:yesapt:upgrade:distupdate_cache:yes- name:Install Docker Requiremtsbecome:yesapt:name:- ca-certificates- curl- gnupg-agent- python3-pip- software-properties-common- name:GPG Key Dockerbecome:yesapt_key:url:https://download.docker.com/linux/ubuntu/gpg- name:Repo Dockerbecome:yesapt_repository:repo:deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stablestate:presentupdate_cache:yes- name:Install Dockerbecome:yesapt:force:Truename:- docker-ce- name:Hold Dockerbecome:yesdpkg_selections:name:docker-ceselection:hold- name:Install Docker Py as rootbecome:yescommand:pip3 install docker-py- name:Install Docker Py as normal usercommand:pip3 install docker-py- name:Enable service docker, and enable persistentlybecome:yesservice:name:dockerenabled:yes- name:Add the user 'ubuntu' to docker groupbecome:yesuser:name:ubuntugroup:docker Terapkan script yang telah kita buat dengan Ansible Playbook seperti berikut. $ ansible docker.yml Jika berhasil maka akan muncul tampilan seperti berikut ini. PLAY RECAP ******************************************************************************************************* 18.233.242.19 : ok=10 changed=9 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 3.224.63.65 : ok=10 changed=9 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 54.198.25.43 : ok=10 changed=9 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:4:4","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Bootstraping Kubernetes Sekarang buat file baru bernama k8s.yml yang berisi script untuk melakukan setup Kubernetes. - hosts:allgather_facts:falsetasks:- name:Add Google official GPG keybecome:yesapt_key:url:https://packages.cloud.google.com/apt/doc/apt-key.gpgstate:present- name:Add Kubernetes Repositorybecome:yesapt_repository:repo:deb http://apt.kubernetes.io/ kubernetes-xenial mainstate:presentfilename:kubernetesmode:0600- name:Installing Kubernetes Cluster Packagesbecome:yesapt:force:Truename:- kubeadm- kubectl- kubeletstate:present- name:Hold kubeadmbecome:yesdpkg_selections:name:kubeadmselection:hold- name:Hold kubectlbecome:yesdpkg_selections:name:kubectlselection:hold- name:Hold kubeletbecome:yesdpkg_selections:name:kubeletselection:hold- name:Add line Net Bridge on sysctl.confbecome:yeslineinfile:path:/etc/sysctl.confline:net.bridge.bridge-nf-call-iptables=1- name:Add line 'max_map_count' on sysctl.confbecome:yeslineinfile:path:/etc/sysctl.confline:vm.max_map_count=262144- name:Apply change on sysctlbecome:yesbecome_method:sudoshell:sysctl -p- hosts:publicgather_facts:falsetasks:- name:Initialize k8s clusterbecome:yesbecome_method:sudoshell:kubeadm reset -f- name:Start k8s initbecome:yesbecome_method:sudoshell:kubeadm init --pod-network-cidr=10.244.0.0/16register:kubeadm_result- debug:var:kubeadm_result.stdout_lines- name:Make configuration folder for k8sbecome:yesbecome_user:ubuntufile:state:directorypath:/home/ubuntu/.kubemode:0755- name:Copy configuration k8s into homebecome:yescopy:src:/etc/kubernetes/admin.confdest:/home/ubuntu/.kube/configremote_src:yesowner:ubuntu- name:apply network plugin flannelbecome:yesbecome_user:ubuntushell:kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml- hosts:nodesgather_facts:falsevars_prompt:- name:\"kubeadm\"prompt:\"kubeadm Command \"private:notasks:- name:Reset kubeadmbecome:yesbecome_method:sudoshell:kubeadm reset -f- name:Prune docker imagesbecome:yesbecome_method:sudoshell:sudo docker image prune -af- name:Retriving input command kubeadmbecome:yesbecome_method:sudoshell:\"{{ kubeadm }}\" Kemudian terapkan script tersebut dengan Ansible Playbook seperti berikut. $ ansible k8s.yml ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:4:5","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Joining Cluster Di tengah proses, kita akan diberikan sebuah token yang harus dimasukkan secara manual. Token tersebut digunakan oleh Worker Node untuk bergabung ke dalam klaster. Join TokenJoin Token \" Join Token Jika berhasil maka akan muncul tampilan seperti berikut ini. PLAY RECAP ******************************************************************************************************* 18.233.242.19 : ok=15 changed=14 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 3.224.63.65 : ok=12 changed=12 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 54.198.25.43 : ok=12 changed=12 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:4:6","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Post Installation ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:5:0","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Menghapus Worker Node Elastic IP Karena Worker Node sudah tidak lagi membutuhkan IP Publik, maka kita akan menghapusnya dengan cara merubah script file infra.tf yang sebelumnya kita buat. Jadikan beberapa baris konfigurasi menjadi comment seperti berikut ini. ## Elastic IP for Node Server (Temporary) #resource \"aws_eip\" \"lb-node\" { # count = 2 # instance = aws_instance.node[count.index].id #} Dan tambahkan comment juga pada baris konfigurasi variabel associate_public_ip_address. #associate_public_ip_address = false Kemudian jalankan kembali Terraform seperti berikut. $ terraform apply Periksa dan jika sudah benar maka ketik yes dan tekan Enter. Apabila berhasil maka akan muncul tampilan seperti berikut. aws_eip.lb-node[1]: Destroying... [id=eipalloc-0adb19f75c6648130] aws_eip.lb-node[0]: Destroying... [id=eipalloc-07464709ac36cafe4] aws_eip.lb-node[0]: Destruction complete after 5s aws_eip.lb-node[1]: Destruction complete after 5s Apply complete! Resources: 0 added, 0 changed, 2 destroyed. ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:5:1","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Ubah Label Worker Node Sekarang coba akses Master Node lewat SSH menggunakan SSH Key yang sebelumnya telah kita miliki. $ ssh -i infra-k8s.pem ubuntu@18.233.242.19 Perhatian Sesuaikan dengan alamat IP Publik yang dimiliki oleh Master Node atau Control Plane. Setelah berhasil masuk, sekarang jalankan perintah berikut. $ kubectl get nodes Maka akan muncul daftar node yang terhubung pada klaster. NAME STATUS ROLES AGE VERSION ip-172-31-16-20 Ready control-plane,master 8m50s v1.20.2 ip-172-31-25-81 Ready \u003cnone\u003e 7m41s v1.20.2 ip-172-31-29-192 Ready \u003cnone\u003e 7m40s v1.20.2 Ubah ROLES Worker Node dengan menambahkan label. $ kubectl label node ip-172-31-25-81 node-role.kubernetes.io/worker=worker1 $ kubectl label node ip-172-31-29-192 node-role.kubernetes.io/worker=worker2 Perhatian Sesuaikan nama node dengan NAME seperti yang muncul dari hasil pemeriksaan daftar node. ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:5:2","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Pengujian Sekarang coba periksa lagi daftar node yang ada. $ kubectl get nodes Jika berhasil hasilnya akan menjadi seperti berikut. NAME STATUS ROLES AGE VERSION ip-172-31-16-20 Ready control-plane,master 8m50s v1.20.2 ip-172-31-25-81 Ready worker 7m41s v1.20.2 ip-172-31-29-192 Ready worker 7m40s v1.20.2 Periksa pod yang berjalan pada semua namespace. $ kubectl get pods --all-namespaces Hasilnya kurang lebih akan seperti berikut. NAMESPACE NAME READY STATUS RESTARTS AGE kube-system coredns-74ff55c5b-kfzvr 1/1 Running 0 4h56m kube-system coredns-74ff55c5b-qrz2j 1/1 Running 0 4h56m kube-system etcd-ip-172-31-16-20 1/1 Running 0 4h56m kube-system kube-apiserver-ip-172-31-16-20 1/1 Running 0 4h56m kube-system kube-controller-manager-ip-172-31-16-20 1/1 Running 0 4h56m kube-system kube-flannel-ds-hltkg 1/1 Running 0 4h55m kube-system kube-flannel-ds-jvvbv 1/1 Running 0 4h56m kube-system kube-flannel-ds-xfdq8 1/1 Running 0 4h55m kube-system kube-proxy-67kgp 1/1 Running 0 4h55m kube-system kube-proxy-bd7cj 1/1 Running 0 4h56m kube-system kube-proxy-gjkr6 1/1 Running 0 4h55m kube-system kube-scheduler-ip-172-31-16-20 1/1 Running 0 4h56m ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:6:0","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Kesimpulan Dengan menggunakan Terraform dan Ansible, kita dapat membangun klaster Kubernetes sendiri pada AWS. Salah satu keunggulan yang saya rasakan adalah fleksibilitas yang tinggi, dimana saya dapat menggunakan spesifikasi instance yang terbilang rendah untuk mencoba membangun klaster Kubernetes jika dibandingkan dengan menggunakan distribusi Kubernetes (seperti OKD atau OpenShift). Jika semua script telah tersedia, maka proses instalasi klaster bisa dikatakan sangat cepat. ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:7:0","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Referensi registry.terraform.io/providers/hashicorp/aws/latest/docs docs.ansible.com/ansible/latest/reference_appendices/playbooks_keywords.html kubernetes.io/docs/setup/production-environment/container-runtimes/#docker kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/ docs.aws.amazon.com/cli/latest/reference/ec2/ docs.aws.amazon.com/cli/latest/userguide/cli-services-ec2-keypairs.html docs.aws.amazon.com/cli/latest/userguide/cli-services-ec2-instances.html docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpcs.html blog.leonprasetya.my.id ","date":"2021-01-17","objectID":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/:8:0","tags":["Kubernetes","Terraform","Ansible","AWS"],"title":"Kubernetes Cluster Provisioning dengan Terraform dan Ansible","uri":"/kubernetes-cluster-provisioning-dengan-terraform-dan-ansible/"},{"categories":["Cloud"],"content":"Memasang Sysdig Agent pada OpenShift untuk Monitoring Cloud Native Environment Cluster OpenShift.","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Sysdig mampu menyediakan Cloud Monitoring yang memungkinkan kita untuk memaksimalkan performa dan ketersediaan dari infrastruktur, layanan, dan aplikasi berbasis cloud. Pada artikel ini saya akan mencoba mengintegrasikan layanan Sysdig Monitor dengan klaster OpenShift Cloud Platform. ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:0:0","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Sysdig Sysdig adalah sebuah Software as a Service (SaaS) yang bertugas untuk mengambil timeseries data atau biasa disebut metric dari klaster atau cloud native environment kemudian mengolah lalu menampilkannya secara real time untuk berbagai kebutuhan, misalnya akselerasi troubleshooting, monitoring at scale, menyederhanakan visibilitas metric, membangun dashboard monitoring yang fleksibel, hingga memberikan alert dengan respon cepat. Sysdig membagi produknya menjadi beberapa jenis, yaitu Sysdig Monitor, Sysdig Secure, dan gabungan dari keduanya yang disebut dengan Sysdig Platform atau Sysdig Secure DevOps Platform. Semua produk tersebut sebenarnya adalah komersil, namun kita dapat mencobanya dengan free-trial selama satu bulan. Pada artikel ini saya hanya akan mencoba mengintegrasikan Sysdig Monitor saja. SysdigSysdig \" Sysdig ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:1:0","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Metrics Metric adalah nilai kuantitatif atau ukuran yang dapat dikelompokkan atau dibagi dengan label. Metric dari Sysdig Monitor dibagi menjadi dua jenis seperti berikut. Default metrics, yaitu metric yang berhubungan dengan sistem atau host, container, orchestrator, HTTP, dan infrastruktur jaringan. Custom metrics, berhubungan dengan metric yang didapat dari aplikasi pihak ketiga seperti JMX, StatsD, Prometheus dan beberapa metric dari aplikasi lain yang terintegrasi. Sysdig secara otomatis mengambil metric dari berbagai tipe, dan melabelinya secara otomatis. Custom Metric juga dapat dilabeli sesuai kebutuhan pengguna. Biasanya metric akan berguna untuk membuat Dashboard hingga Alerts. MetricMetric \" Metric ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:1:1","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Sysdig Agent Untuk dapat berjalan pada lingkungan cloud native yang kita miliki, Sysdig menggunakan agent yang disebut dengan Sysdig Agent, di mana agent tersebut diwujudkan sebagai sebuah container atau sebuah service yang dapat di-deploy dengan atau tanpa container orchestrator seperti Kubernetes atau Mesos. ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:1:2","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Prerequisites Pastikan beberapa syarat ini terpenuhi sebelum melakukan tahap lebih lanjut. ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:2:0","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Membuat Akun Kita memerlukan sebuah akun free-trial untuk mencoba Sysdig. Akun ini kita perlukan agar dapat mengoperasikan dashboard front end Sysdig Monitor dari klaster OpenShift kita. Silahkan membuat akun Sysdig dengan alamat berikut. Membuat Akun SysdigMembuat Akun Sysdig \" Membuat Akun Sysdig Isi beberapa data yang dibutuhkan seperti nama, jabatan pekerjaan, alamat email, nama perusahaan, dan negara. Kemudian pilih Trial Offer yang dibutuhkan, misalnya Sysdig Monitor. Untuk SaaS Region dapat dipilih berdasarkan di mana letak infrastruktur kita berada. Karena saya menggunakan layanan AWS di Amerika Serikat untuk menjalankan klaster OpenShift, maka saya memilih Region us-west. Kemudian untuk Primay Use Cases dapat di pilih apapun, misalnya Kubernetes Monitoring. Konfirmasi EmailKonfirmasi Email \" Konfirmasi Email Jika kata sandi sudah dibuat, biasanya kita perlu menunggu sekitar 15 menit untuk dapat masuk ke front-end dari Setelah membuat akun, tunggu beberapa saat dan kita akan mendapatkan sebuah email untuk membuat kata sandi baru. ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:2:1","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Mendapatkan Access Key Untuk mendapatkan access key kita perlu masuk ke situs front end Sysdig. Kita dapat mengaksesnya dengan URL sesuai dengan Region yang kita gunakan. Region URL US East (North Virginia) app.sysdigcloud.com/#/login US West (Oregon) us2.app.sysdig.com/#/login European Union eu1.app.sysdig.com/#/login Setelah login, lalu masuk ke halaman Settings seperti berikut ini. SettingsSettings \" Settings Kemudian, pilih Agent Installation maka akan terdapat Access Key yang nanti akan kita gunakan. Settings - Agent InstallationSettings - Agent Installation \" Settings - Agent Installation ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:2:2","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Klaster OpenShift Di sini saya telah memiliki klaster OpenShift 4 dari hasil instalasi dengan metode IPI seperti yang telah saya tulis pada artikel sebelumnya (Quick Install OKD 4 di AWS). Dan pastikan bahwa OpenShift dapat dikelola dari komputer lokal kita menggunakan perintah oc atau origin-client. Klaster OpenshiftKlaster OpenShift \" Klaster Openshift ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:2:3","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Konfigurasi OpenShift Jika prasyarat sebelumnya telah terpenuhi, maka kita dapat melanjutkan beberapa tahap berikut. ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:3:0","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Membuat Project Baru Buat sebuah project baru untuk deployment Sysdig Agent seperti berikut. $ oc adm new-project sysdig-agent --node-selector='app=sysdig-agent' ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:3:1","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Melabeli Node Labeli semua node dengan node selector seperti berikut ini. $ oc label node --all \"app=sysdig-agent\" ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:3:2","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Pindah Project Sekarang kita akan berpindah menuju project yang baru saja dibuat, jalankan perintah berikut. $ oc project sysdig-agent ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:3:3","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Membuat Service Account Kita perlu membuat service account baru untuk project sysdig-agent. $ oc create serviceaccount sysdig-agent ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:3:4","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Previlege Security Context Constraints Tambahkan service account sebelumnya ke previleged Security Context Constraint dengan perintah berikut ini. $ oc adm policy add-scc-to-user privileged -n sysdig-agent -z sysdig-agent ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:3:5","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Cluster Role Tambahkan service account sebelumnya ke Cluster Role cluster-reader seperti berikut. $ oc adm policy add-cluster-role-to-user cluster-reader -n sysdig-agent -z sysdig-agent ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:3:6","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Memasang Sysdig Agent Pada tahap ini saya akan menggunakan Helm untuk mempermudah dan mempercepat pemasangan Sysdig Agent pada klaster. ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:4:0","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Pasang Paket Helm Sebelumnya pasang terlebih dahulu paket helm di komputer lokal kita dengan perintah seperti berikut. $ sudo pacman -Sy helm Perhatian Saya menggunakan sistem GNU/Linux dengan distro Arch-based, maka di sini saya memakai package manager pacman. Silahkan sesuaikan dengan distro yang kalian gunakan. ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:4:1","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Menambah Repositori Tambahkan repositori Helm dari Sysdig ke komputer lokal. $ helm repo add sysdig https://charts.sysdig.com $ helm repo update ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:4:2","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Pasang Sysdig Agent dengan Helm Jalankan perintah berikut ini untuk memasang Sysdig Agent melalui Helm. $ helm install sysdig-agent \\ --set sysdig.accessKey=\u003caccess key\u003e \\ --set sysdig.settings.collector=ingest-us2.app.sysdig.com \\ --set sysdig.settings.collector_port=6443 \\ --set sysdig.settings.k8s_cluster_name=\u003cnama klaster\u003e \\ --set sysdig.settings.ssl=true \\ --set sysdig.settings.ssl_verify_certificate=false \\ sysdig/sysdig Sesuaikan accessKey dengan yang kita dapat dari front-end Sysdig di tahap sebelumnya. Sesuaikan juga k8s_cluster_name dengan nama klaster OpenShift kita. Sedangkan untuk collector dan collector_port disesuaikan dengan region dari akun Sysdig yang kita gunakan, di sini saya memakai ingest-us2.app.sysdig.com:6443 karena saya menggunakan akun Sysdig dengan region us-west. Untuk informasi selengkapnya dari masing-masing region, silahkan melihat alamat kolektor dari Sysdig. ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:4:3","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Pengujian Jika tahap-tahap sebelumnya telah dilakukan, sekarang kita akan menguji apakah Sysdig Agent berhasil terpasang pada klaster. ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:5:0","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Pods Coba periksa pods milik Sysdig Agents dengan perintah berikut. $ oc get pods Jika berhasil, maka kurang lebih akan muncul tampilan seperti berikut. NAME READY STATUS RESTARTS AGE sysdig-agent-2wcsj 1/1 Running 0 32m sysdig-agent-45hgx 1/1 Running 0 32m sysdig-agent-559z9 1/1 Running 0 32m sysdig-agent-89wqp 1/1 Running 0 32m sysdig-agent-b5vbn 1/1 Pending 0 32m sysdig-agent-b9rlt 1/1 Running 0 32m sysdig-agent-image-analyzer-2rjht 1/1 Running 0 32m sysdig-agent-image-analyzer-5vmp2 1/1 Running 0 32m sysdig-agent-image-analyzer-m6xkb 1/1 Running 0 32m sysdig-agent-image-analyzer-mhgb7 1/1 Running 0 32m sysdig-agent-image-analyzer-n8xm2 1/1 Running 0 32m sysdig-agent-image-analyzer-pgr9p 1/1 Running 0 32m sysdig-agent-image-analyzer-pn8kv 1/1 Running 0 32m sysdig-agent-image-analyzer-q4mvv 1/1 Running 0 32m sysdig-agent-image-analyzer-rstz5 1/1 Running 0 32m sysdig-agent-n4wqv 1/1 Running 0 32m sysdig-agent-pd745 1/1 Running 0 32m sysdig-agent-vsr4b 1/1 Running 0 32m ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:5:1","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Front End Buka kembali dashboard front-end Sysdig, apabila Sysdig Agent berhasil terpasang maka seharusnya pada halaman Get Started akan muncul tampilan seperti berikut. Front End SysdigFront End Sysdig \" Front End Sysdig Selanjutnya coba buka Dashboard kemudian misalnya pilih saja Host Resource Usage, seharusnya akan tampil informasi penggunaan resource dari klaster seperti berikut ini. Host Resource UsageHost Resource Usage \" Host Resource Usage Sedangkan untuk menampilkan Overview kita perlu menunggu beberapa saat karena Sysdig membutuhkan waktu yang cukup lama untuk mengolah metric dari klaster. Jika sudah bisa ditampilkan, maka kurang lebih akan seperti berikut. Sysdig Monitor OverviewSysdig Monitor Overview \" Sysdig Monitor Overview ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:5:2","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Kesimpulan Jika kita ingin melakukan inspeksi lebih lanjut terhadap container yang ada pada klaster, sebenarnya kita dapat memilih menggunakan Sysdig Platform di mana kita juga akan mendapatkan Sysdig Secure untuk keperluan forensik atau kebutuhan lain terkait keamanan pada klaster. Pada bagian Settings di Sysdig Monitor kita akan mendapati beberapa fitur Notification Channels yang lumayan berguna. Fitur tersebut dapat kita kombinasikan dengan menu Alerts untuk mengirimkan pemberitahuan langsung melalui beberapa macam layanan seperti Email, Slack, hingga WebHook. Sebagai alternatif lain dari Sysdig kita dapat menggunakan tools seperti GAP Stack (Grafana, Alertmanager, Prometheus) atau DataDog. Sebelumnya saya mencoba untuk mengintegrasikan Sysdig pada OKD namun menemui issue pada pod Sysdig Agent, selanjutnya saya putuskan untuk mencobanya di klaster OpenShift dan Sysdig Monitor dapat berjalan tanpa kendala. ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:6:0","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Referensi docs.sysdig.com/en/getting-started-with-sysdig-monitor.html docs.sysdig.com/en/host-requirements-for-agent-installation.html docs.sysdig.com/en/steps-for-openshift.html charts.sysdig.com/ docs.sysdig.com/en/saas-regions-and-ip-ranges.html docs.openshift.com/container-platform/4.6/cli_reference/helm_cli/getting-started-with-helm-on-openshift-container-platform.html www.openshift.com/blog/monitoring-openshift-three-tools kubernetes.io/docs/concepts/cluster-administration/system-metrics/ ","date":"2021-01-12","objectID":"/integrasi-sysdig-monitor-di-openshift/:7:0","tags":["Sysdig","OpenShift","Monitoring","SaaS"],"title":"Integrasi Sysdig Monitor di OpenShift","uri":"/integrasi-sysdig-monitor-di-openshift/"},{"categories":["Cloud"],"content":"Membangun Cluster OKD 4 di AWS dengan Installer-Provisioned Infrastructure","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"OKD 4 memiliki installer yang menawarkan fleksibilitas dan kemudahan bagi pengguna. Proses instalasi hanya akan memakan waktu sekitar 40 menit hingga cluster OKD sudah dapat berjalan dan siap untuk dikelola. ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:0:0","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"OKD 4 OKD adalah distribusi dari Kubernetes yang menjadi upstream dari pengembangan OpenShift. OKD merupakan versi community dari OpenShift, yang dapat digunakan tanpa biaya subscription. Kode sumbernya dipublikasikan pada repositori Github, dan semua orang dapat berkontribusi untuk mengembangkannya. Silahkan lihat perbandingan antara OKD 4 dengan OKD 3 pada dokumentasi resmi OKD. ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:1:0","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Jenis Instalasi Pada umumnya terdapat 2 macam instalasi OKD 4 seperti berikut. IPI (Installer-Provisioned Infrastructure). Dengan metode IPI, installer akan bertindak sepenuhnya dalam proses instalasi cluster. Setiap machine harus mampu mengakses internet untuk menarik images yang diperlukan untuk inisialisasi ketika deployment cluster. IPI merupakan cara paling cepat untuk membangun cluster OKD yang dapat kita implementasikan pada AWS (Amazon Web Service), GCP (Google Cloud Platform), Azure, hingga baremetal. Dalam artikel ini saya akan menggunakan IPI sebagai metode instalasi. UPI (User-Provisioned Infrastructure). Mirip dengan IPI, namun lebih advanced, di mana kita dapat menggunakan metode UPI jika benar-benar concern terhadap keamanan. Biasanya cluster akan membutuhkan sebuah proxy dan akses ke internet akan lebih dibatasi. Karena akses ke internet yang lebih ketat, maka cluster juga memerlukan mirror registry yang lebih spesifik. UPI cenderung lebih rumit, namun memiliki pilihan konfigurasi yang sangat beragam dibandingkan metode IPI, misalnya seperti mengganti sistem operasi machine dengan RHCOS (Red Hat Enterprise Linux CoreOS). ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:1:1","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Installation Workflow OKD menggunakan sebuah bootstrap machine temporer pada saat inisialisasi konfigurasi guna menyediakan informasi yang diperlukan bagi control plane. Bootstrap machine dihidupkan dengan sebuah file konfigurasi bernama Ignition yang mendeskripsikan bagaimana proses pembangunan cluster akan dilakukan. Bootstrap machine akan membuat sebuah master machine yang digunakan sebagai control plane. Dan control plane kemudian akan membuat compute machine atau yang biasa disebut sebagai worker machine. Proses BootstrapingProses Bootstraping \" Proses Bootstraping Setelah semua machine pada cluster di-inisialisasi, maka bootstrap machine akan di-destroy. Jika menggunakan metode UPI, kita perlu melakukan beberapa proses di atas secara manual. ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:2:0","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Minimum Requirements OKD 4 memiliki syarat minimum spesifikasi sistem yang cenderung mirip dengan OKD 3. Berikut ini adalah spesifikasi singkat sebagai gambarannya. Host Specs Masters 4 vCPUs dan 16 GB RAM Nodes 1 vCPUs dan 8 GB RAM Jika menggunakan AWS sebagai host, maka by-default OKD installer akan membuat instance dengan tipe m5.xlarge sebagai master dan tipe m5.large sebagai worker. Untuk lebih lengkapnya silahkan baca spesifikasi minimum di dokumentas resmi OKD dan jenis-jenis dari instance AWS EC2. ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:3:0","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Prerequisites Sebelum melakukan instalasi lebih lanjut, pastikan beberapa hal berikut sudah terpenuhi. ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:4:0","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Akses AWS Pasang paket aws-cli pada komputer lokal. $ sudo pacman -Sy aws-cli Perhatian Dalam artikel ini saya akan menggunakan AWS Programmatic Access sebagai credentials untuk mengelola AWS menggunakan aws-cli. Untuk informasi lebih lanjut silahkan baca dokumentasi AWS CLI. Saya memiliki AWS Programmatic Access yang terdiri dari aws_access_key_id dan aws_secret_access_key. Masukkan kedua key tersebut ke dalam konfigurasi aws cli. $ mkdir -p ~/.aws $ vim ~/.aws/credentials Isi file credentials dengan kedua key yang kita meliki, sehingga kurang lebih akan manjadi seperti berikut. [default] aws_access_key_id=AKIA3ANXUSNAUAXXXXXX aws_secret_access_key=+JDR1HWw4vrcFrLqbf+ewv/nJL/L6TlVAhXXXXXX ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:4:1","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"SSH Private Key Kita perlu menambahkan SSH key ke agent dan installer untuk menampilkan informasi ketika proses instalasi berjalan, atau untuk melakukan pengelolaan lebih lanjut terhadap cluster menggunakan installer. Di sini saya sudah memiliki SSH key seperti berikut. /home/pwn3r/.ssh ├── id_rsa ├── id_rsa.pub └── known_hosts Jika belum memiliki SSH key kita dapat membuatnya dengan ssh-keygen. $ ssh-keygen -t rsa -b 4096 -N '' -f ~/.ssh/id_rsa Kemudian jalankan ssh-agent di background. $ eval \"$(ssh-agent -s)\" Lalu tambahkan SSH key ke ssh-agent. $ ssh-add ~/.ssh/id_rsa ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:4:2","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Unduh Installer Program installer dapat diunduh dari https://github.com/openshift/okd/releases. Installer OKD 4Installer OKD 4 \" Installer OKD 4 Untuk lebih mudahnya saya akan membuat sebuah direktori baru bernama okd pada home directory dan mengunduh installer ke dalam direktori tersebut. $ mkdir ~/okd $ cd ~/okd $ wget https://github.com/openshift/okd/releases/download/4.6.0-0.okd-2020-12-12-135354/openshift-install-linux-4.6.0-0.okd-2020-12-12-135354.tar.gz Perhatian Pastikan URL installer untuk perintah wget di atas sesuai dengan versi yang benar. Pada saat artikel ini diterbitkan, OKD terbaru berada pada versi 4.6. Ekstrak file tar.gz dengan perintah berikut. $ tar -xvf openshift-install*.tar.gz Kita akan memiliki sebuah file bernama openshift-install, jadikan file tersebut menjadi executable. $ chmod +x openshift-install ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:4:3","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Instalasi Untuk melakukan instalasi kita cukup menjalankan satu perintah seperti berikut. $ ./openshift-install create cluster --log-level=info Selanjutnya installer akan meminta beberapa informasi yang dibutuhkan, silahkan pilih atau isi sesuai dengan kebutuhan. Pull Secret bisa diperoleh dari situs Red Hat OpenShift Cluster Manager. Cukup tekan Copy pull secret dan paste pada terminal ketika installer memintanya. Pull SecretPull Secret \" Pull Secret ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:5:0","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Hasil Proses akan berlangsung sedemikian rupa secara otomatis. Pada umumnya intalasi cluster OKD dengan konfigurasi default akan berlangsung sekitar 40 menit. Jika berhasil kurang lebih akan muncul tampilan seperti berikut. Proses InstalasiProses Instalasi \" Proses Instalasi ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:5:1","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Pengujian Kita akan melakukan beberapa pemeriksaan terhadap cluster OKD 4. Selain lewat web browser, kita dapat menggunakan oc atau origin-client. Jika belum memilikinya maka lakukan pemasangan paket pada komputer lokal seperti berikut. $ yay -Sy origin-client Info Pada distro Arch-based, origin-client tersedia pada AUR (Arch User Repository). Untuk melakukan instalasi paket dari AUR, saya menggunakan AUR Helper bernama yay. ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:6:0","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Login sebagai System Admin Untuk bertindak sebagai sistem admin melalui perintah oc, kita me-export variabel environment seperti berikut. $ export KUBECONFIG=/home/pwn3r/okd/auth/kubeconfig Kemudian jalankan periksa user yang sedang berjalan di sesi oc saat ini. $ oc whoami Harusnya akan muncuk tampilan seperti berikut. system:admin ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:6:1","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Periksa Nodes Coba periksa apakah semua node sudah dalam keadaan berjalan dengan oc. $ oc get nodes Kurang lebih akan muncul tampilan seperti berikut. NAME STATUS ROLES AGE VERSION ip-10-0-130-52.us-west-1.compute.internal Ready master 5h41m v1.19.2+7070803-1008 ip-10-0-132-253.us-west-1.compute.internal Ready master 5h41m v1.19.2+7070803-1008 ip-10-0-155-103.us-west-1.compute.internal Ready worker 5h31m v1.19.2+7070803-1008 ip-10-0-166-37.us-west-1.compute.internal Ready worker 5h32m v1.19.2+7070803-1008 ip-10-0-225-80.us-west-1.compute.internal Ready master 5h41m v1.19.2+7070803-1008 ip-10-0-240-130.us-west-1.compute.internal Ready worker 5h32m v1.19.2+7070803-1008 Terlihat bahwa terdapat 3 node yang bertindak sebagai master, dan 3 node lain sebagai worker. ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:6:2","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Scaling MachineSet Periksa machineset yang ada dengan perintah berikut. $ oc get machineset -n openshift-machine-api Maka akan tampil machineset yang ada pada OKD. NAME DESIRED CURRENT READY AVAILABLE AGE itglab-f2l75-worker-us-west-1a 2 2 2 2 5h48m itglab-f2l75-worker-us-west-1b 1 1 1 1 5h48m Artinya machineset itglab-f2l75-worker-us-west-1a memiliki replika sebanyak 2 buah. Sedangkan itglab-f2l75-worker-us-west-1b hanya memiliki 1 replika. Sekarang coba lakukan scaling supaya machineset memiliki 2 buah replikasi. $ oc scale --replicas=2 machinesets itglab-f2l75-worker-us-west-1b -n openshift-machine-api Biasanya kita perlu menunggu beberapa saat supaya machine berjalan dan kemudian bergabung pada machineset itglab-f2l75-worker-us-west-1b. Lama durasi tergantung pada spesifikasi sistem yang kita gunakan di AWS. Periksa apakah scaling berhasil dilakukan dengan menjalankan kembali perintah berikut. $ oc get machineset -n openshift-machine-api Jika berhasil maka semua machineset akan menjadi seperti berikut. NAME DESIRED CURRENT READY AVAILABLE AGE itglab-f2l75-worker-us-west-1a 2 2 2 2 5h58m itglab-f2l75-worker-us-west-1b 2 2 2 2 5h58m ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:6:3","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Web Console OKD Sekarang coba akses OKD Console melalui web browser dengan alamat dan kata sandi seperti yang terlihat sebelumnya menggunakan username kubeadmin. OKD Web ConsoleOKD Web Console \" OKD Web Console ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:6:4","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Destroy Cluster Installer OKD 4 juga memiliki fitur untuk menghapus semua resource yang telah dibuat sehingga saya tidak perlu repot-repot membersihkan satu region di AWS Console. Destroy cluster dapat dijalankan dengan perintah seperti berikut. $ ./openshift-install destroy cluster --log-level=info ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:6:5","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Kesimpulan OKD 4 memiliki installer yang tergolong mudah untuk diimplementasikan (pada AWS). Setiap node OKD 4 berjalan dengan sistem operasi FCOS (Fedora Core OS), namun jika kita menggunakan OpenShift maka yang digunakan adalah RHCOS (Red Hat Enterprise Linux CoreOS). OKD 4 menggunakan Prometheus untuk mendapatkan metric yang berguna untuk monitoring. Container Runtime yang dipakai oleh OKD 4 adalah CRI-O. ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:7:0","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Referensi docs.okd.io/latest/architecture/architecture-installation.html docs.okd.io/latest/installing/installing_aws/installing-aws-default.html wiki.archlinux.org/index.php/OpenShift github.com/openshift/okd#getting-started github.com/openshift/okd/blob/master/FAQ.md github.com/openshift/okd/releases docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html aws.amazon.com/ec2/instance-types/ ","date":"2021-01-09","objectID":"/quick-install-okd-4-di-aws/:8:0","tags":["OpenShift","OKD","AWS","Platform","PaaS"],"title":"Quick Install OKD 4 di AWS","uri":"/quick-install-okd-4-di-aws/"},{"categories":["Cloud"],"content":"Instalasi Minishift untuk menjalankan cluster node OKD (OpenShift) di komputer lokal.","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Minishift membangun klaster single-node OKD (Openshift) pada VM (Virtual Machine) yang berdiri di atas Hypervisor milik komputer lokal. Dengan Minishift kita dapat mempelajari OKD dalam komputer sendiri sebelum menggunakan teknologi Openshift di lingkungan production sebenarnya. ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:0:0","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"OpenShift dan OKD OpenShift adalah distribusi dari Kubernetes yang memiliki fungsi serupa, namun memiliki beberapa fitur tambahan yang memanjakan. Seiring dengan populernya ide cloud computing, berbagai evolusi komputasi telah terjadi. Misalnya adalah metode dalam mengembangkan dan delivery aplikasi untuk sampai ke hadapan user. Seringkali aplikasi/product digital akan dikemas dalam bentuk container untuk alasan kompabilitas, skalabilitas, keamanan, hingga kecepatan pengembangan. Kubernetes awalnya diinisialisasi oleh Google dan kini dikembangkan oleh CNCF, sedangkan OpenShift dinaungi oleh Red Hat menawarkan kemampuan manajemen workloads aplikasi serta otomatisasi secara deklaratif. OpenShift merupakan paid-product, namun kita juga dapat menggunakan versi free of charge bernama OKD sebagai alternatif. OKD pernah bernama OpenShift Origin sebelum mengalami pergantian julukan. Saat artikel ini diterbitkan, OKD telah berkembang menjadi beberapa macam produk, beberapa diantaranya yaitu Self-Managed (seperti OpenShift Container Platform), hingga Managed (seperti Openshift Online dan Openshift Dedicated). OpenShift by Red HatOpenShift by Red Hat \" OpenShift by Red Hat ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:1:0","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Katalog OKD OKD 3 by-default telah menyediakan dukungan bagi aplikasi dengan beberapa bahasa pemrograman. OKD 3 memiliki kickstart template seperti berikut : Rails untuk Ruby Django untuk Python Node.js CakePHP untuk PHP Dancer untuk Perl Maven untuk Java Sedangkan untuk basis data, OKD 3 juga telah menyediakan beberapa diantaranya : MySQL MongoDB PosgreSQL Tidak hanya itu saja, OKD 3 juga telah menawarkan fitur CI/CD Pipeline yang siap di-integrasikan dengan Jenkins, sebuah Middleware Apache, hingga Reverse-proxy NGINX. ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:1:1","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Minishift Minishift adalah sebuah tool yang membantu kita untuk menjalankan OpenShift di komputer lokal. Jika bermain dengan Kubernetes, biasanya kita akan menjumpai tool serupa bernama Minikube. Minishift akan membuat dan menjalankan sebuah VM di atas Hypervisor yang tersedia di komputer kita. Saat artikel ini diterbitkan, Minishift hanya mendukung hingga OKD versi 3.11 atau OpenShift 3. Arsitektur MinishiftArsitektur Minishift \" Arsitektur Minishift ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:1:2","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Prerequisites Pastikan bahwa komputer lokal kita memiliki spesifikasi yang cukup untuk memasang OKD/OpenShift. Secara default Minishift akan membuat sebuah VM dengan spesifikasi seperti berikut. Resources Value CPUs 2 core Memory 4 GB Storage 20 GB ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:2:0","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Mempersiapkan Environment Virtualiasi Minishift mendukung beberapa Hypervisor untuk membuat dan menjalankan VM. Beberapa diantaranya adalah sebagai berikut. Sistem Operasi Hypervisor Microsoft Windows Hyper-V GNU/Linux KVM MacOS hyperkit All Platform VirtualBox Karena saya menggunakan GNU/Linux, maka dalam artikel ini kita akan menggunakan KVM sebagai environment virtualiasi Minishift. Atau lebih tepatnya, saya menggunakan distro GNU/Linux Arch-based. ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:3:0","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Konfigurasi libvirt 1. Pasang paket-paket yang dibutuhkan untuk virtualisasi $ sudo pacman -Sy virt-manager kvm libvirt-runit qemu qemu-guest-agent-runit ebtables bridge-utils 2. Tambahkan user ke dalam grup kvm dan libvirt $ sudo usermod -aG kvm,libvirt $(whoami) $ newgrp libvirt $ id Jika sudah benar, seharusnya akan keluar output seperti berikut GroupGroup \" Group 3. Merubah konfigurasi qemu Ganti konfigurasi /etc/libvirt/qemu.conf agar menggunakan group kvm. $ sudo sed -ri 's/.?group\\s?=\\s?\".+\"/group = \"kvm\"/1' /etc/libvirt/qemu.conf 4. Menjalankan service libvirt $ sudo ln -s /etc/runit/sv/libvirtd /run/runit/service $ sudo ln -s /etc/runit/sv/virtlockd /run/runit/service $ sudo ln -s /etc/runit/sv/virtlogd /run/runit/service Perhatian Saya menggunakan runit sebagai sistem init di komputer lokal. Jika memakai systemd maka silahkan menggunakan perintah systemctl untuk mengelola service. 5. Menjalankan jaringan libvirt Periksa status jaringan yang tersedia saat ini. $ sudo virsh net-list --all Maka akan muncul output seperti berikut. Name State Autostart Persistent --------------------------------------------------------- default inactive no yes Artinya kita memiliki sebuah jaringan bernama default. Maka aktifkan dan buat supaya jaringan tersebut berjalan secara otomatis dengan perintah seperti berikut. $ sudo virsh net-start default $ sudo virsh net-autostart default ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:3:1","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Memasang Minishift Pasang paket-paket yang dibutuhkan. $ yay -Sy minishift docker-machine-kvm origin-client Info Pada distro Arch-based, minishift dan beberapa paket pendukung lainnya telah tersedia pada AUR (Arch User Repository). Untuk melakukan instalasi paket dari AUR, saya menggunakan AUR Helper bernama yay. ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:4:0","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Menjalankan OKD dengan Minishift Jalankan perintah seperti berikut. $ minishift start Atau kita dapat memberikan flags ketika menjalankan minishift untuk membuat VM dengan spesifikasi yang kita butuhkan. Misalnya saya ingin Minishift membuat VM dengan memory sebesar 3 GB, CPU sebanyak 1 core, dan Storage sebesar 8 GB saja. Jalankan perintah seperti berikut. $ minishift start --disk-size 8g --memory 3072 --cpus 1 Jika berhasil maka akan muncul output seperti berikut. OKD BerjalanOKD Berjalan \" OKD Berjalan ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:5:0","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Pengujian Minishift Periksa apakah VM benar-benar berhasil dibuat. $ sudo virsh list Akan muncul output seperti berikut jika benar. Id Name State --------------------------- 4 minishift running Memeriksa status Minishift dengan perintah berikut. $ minishift status Jika OKD berjalan maka kurang lebih akan muncul output seperti berikut. Minishift: Running Profile: minishift OpenShift: Running (openshift v3.11.0+1cd89d4-542) DiskUsage: 43% of 6.9G (Mounted On: /mnt/sda1) CacheUsage: 1.707 GB (used by oc binary, ISO or cached images) ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:5:1","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"SSH Remote Access Untuk mencoba mengakses VM Minishift melalui SSH kita dapat menjalankan perintah berikut. $ minishift ssh Remote Access MinishiftRemote Access Minishift \" Remote Access Minishift ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:5:2","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Menghentikan Minishift Untuk menghentikan Minishift kita dapat menjalankan perintah berikut. $ minishift stop ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:5:3","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Menghapus Resource Minishift Jika ingin menghapus seluruh resource termasuk VM yang telah dibuat, kita dapat menjalankan perintah berikut. $ minishift delete --force ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:5:4","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Pengujian ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:6:0","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Web Console Seperti yang telah kita lihat sebelumnya. Bahwa web console telah dijalankan pada alamat https://192.168.42.192:8443/console. Sekarang buka alamat tersebut menggunakan web browser untuk memeriksa apakah web console benar-benar berjalan. Web Console OKDWeb Console OKD \" Web Console OKD ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:6:1","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Command Line origin client atau oc adalah program berbasis teks yang digunakan untuk mengelola OKD (OpenShift) lewat terminal. Kita dapat melihat status OKD dengan perintah seperti berikut $ oc status Karena masih kosong, dan OKD belum kita perintah untuk menjalankan layanan apapun maka akan muncul output seperti berikut. In project My Project (myproject) on server https://192.168.42.156:8443 You have no services, deployment configs, or build configs. Run 'oc new-app' to create an application. ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:6:2","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Kesimpulan Jika dibandingkan dengan Minikube, maka seharusnya Minishift bisa dikatakan memiliki fungsi yang serupa. Sayangnya saat artikel ini dibuat Minishift hanya dapat digunakan untuk membangun OKD 3 (OpenShift 3), sedangkan untuk membangun OpenShift 4 di komputer lokal kita dapat menggunakan tool lain bernama CodeReady. Sayangnya CodeReady membutuhkan spesifikasi komputer yang cukup besar. Setelah kita perhatikan, By-default OKD yang dibangun oleh Minishift berjalan pada VM CentOS 7 Core untuk melakukan instalasi cluster. OKD adalah versi upstream dari pengembangan project OpenShift, artinya tentu saja OpenShift lebih stabil dan layak digunakan jika dibandingkan dengan OKD. Namun untuk belajar workflow dari OpenShift, OKD bisa dibilang cukup mumpuni (tentunya dengan effort yang mungkin lebih besar). ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:7:0","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Cloud"],"content":"Referensi wiki.archlinux.org/index.php/OpenShift wiki.archlinux.org/index.php/Libvirt www.okd.io/#v3 docs.okd.io/3.11/architecture/index.html docs.okd.io/3.11/minishift/getting-started docs.okd.io/3.11/minishift/using/index.html www.openshift.com/blog/oc-command-newbies kubernetes.io/docs/concepts/overview/what-is-kubernetes ","date":"2021-01-05","objectID":"/instalasi-lokal-minishift-okd/:8:0","tags":["OpenShift","OKD","Platform","PaaS"],"title":"Instalasi Lokal Minishift OKD","uri":"/instalasi-lokal-minishift-okd/"},{"categories":["Blog"],"content":"Menggunakan APEX root level domain untuk Github Pages","date":"2021-01-01","objectID":"/custom-apex-domain-untuk-github-pages/","tags":["Domain","DNS","Github","Review"],"title":"Custom APEX Domain untuk Github Pages","uri":"/custom-apex-domain-untuk-github-pages/"},{"categories":["Blog"],"content":"APEX Domain sering juga disebut bare domain atau Top Level Domain (TLD), merupakan domain utama tanpa imbuhan yang dapat kita pasang pada Github Pages supaya alamat situs web tidak lagi menggunakan subdomain bawaan Github. Kustomisasi domain pada Github Pages cukup mudah, dan mampu memberikan kesan profesional pada situs web. ","date":"2021-01-01","objectID":"/custom-apex-domain-untuk-github-pages/:0:0","tags":["Domain","DNS","Github","Review"],"title":"Custom APEX Domain untuk Github Pages","uri":"/custom-apex-domain-untuk-github-pages/"},{"categories":["Blog"],"content":"Memilih Provider Perhatian Anggaplah kita sudah memiliki sebuah project yang di-host pada Github Pages, misalnya dalam artikel ini saya menggunakan remote repository dari blog init.web.id. Github Pages sebetulnya sudah menyediakan alamat domain bagi situs web Github Pages dengan menggunakan domain \u003cusername\u003e.github.io tanpa biaya. Namun kita juga dapat merubahnya sesuai keinginan kita, jika telah memiliki TLD sendiri. Saya memutuskan untuk menyewa domain init.web.id dan menggunakannya sebagai domain utama dari blog ini, untuk bahan belajar mencoba hal-hal baru. Domain dari DewaBiz.comDomain dari DewaBiz.com \" Domain dari DewaBiz.com Terdapat banyak sekali provider layanan sewa domain, dari yang berbayar hingga yang gratis. Karena sebelumnya saya sudah terbiasa berlangganan sewa VPS (Virtual Private Server) MikroTik CHR pada DewaBiz.com, saya ingat bahwa provider tersebut juga menyediakan jasa penyewaan domain yang dilengkapi fitur DNS Management. Saya akhirnya menggunakan jasa DewaBiz.com lagi, kali ini adalah untuk menyewa domain. ","date":"2021-01-01","objectID":"/custom-apex-domain-untuk-github-pages/:1:0","tags":["Domain","DNS","Github","Review"],"title":"Custom APEX Domain untuk Github Pages","uri":"/custom-apex-domain-untuk-github-pages/"},{"categories":["Blog"],"content":"Pemesanan Domain Untuk melakukan pemesanan, kita cukup melakukan registrasi akun seperti pada umumnya. Kemudian mencari alamat domain yang ingin kita sewa, jika tersedia maka domain dapat kita pesan. Setelah melakukan pemesanan, maka lakukan pembayaran sesuai ketentuan yang berlaku pada masing-masing provider. Biasanya kita dapat melakukan transfer lewat ATM Bank, Internet Banking hingga lewat E-Wallet seperti LinkAja, GoPay, atau OVO. Jangan lupa untuk melakukan konfirmasi kepada customer service bahwa kalian telah melakukan pembayaran, dengan melampirkan bukti transaksi (biasanya berupa struk dari ATM atau screenshot jika dilakukan secara virtual) dan sebutkan juga nomor invoice dari pemesanan. Invoice PemesananInvoice Pemesanan \" Invoice Pemesanan ","date":"2021-01-01","objectID":"/custom-apex-domain-untuk-github-pages/:1:1","tags":["Domain","DNS","Github","Review"],"title":"Custom APEX Domain untuk Github Pages","uri":"/custom-apex-domain-untuk-github-pages/"},{"categories":["Blog"],"content":"Konfigurasi GitHub Pages Bagian pertama yang perlu dilakukan adalah melakukan beberapa konfigurasi dari sisi Github. Berikut ini adalah beberapa hal yang perlu kita lakukan pada repository Github. ","date":"2021-01-01","objectID":"/custom-apex-domain-untuk-github-pages/:2:0","tags":["Domain","DNS","Github","Review"],"title":"Custom APEX Domain untuk Github Pages","uri":"/custom-apex-domain-untuk-github-pages/"},{"categories":["Blog"],"content":"Membuat CNAME Record Untuk melakukan pointing domain, sebelumnya kita perlu membuat CNAME record di repository kita. Buat file baru dengan nama CNAME berisikan alamat custom domain yang telah kita sewa, yaitu init.web.id. $ echo \"init.web.id\" \u003e CNAME Lakukan commit dan upload perbahan tersebut ke remote repository Github. $ git add CNAME $ git commit -m \"Add CNAME record\" $ git push Sehingga direktori repository lokal kita menjadi seperti berikut. blog ├── about ├── categories ├── CNAME \u003c--------- Tambahkan file ini ├── css ├── favicon.ico ├── index.html ├── js ├── lib ├── page ├── posts ├── README.md ├── svg └── tags ","date":"2021-01-01","objectID":"/custom-apex-domain-untuk-github-pages/:2:1","tags":["Domain","DNS","Github","Review"],"title":"Custom APEX Domain untuk Github Pages","uri":"/custom-apex-domain-untuk-github-pages/"},{"categories":["Blog"],"content":"Repository Settings Masuk ke halaman Settings dari repository Github kita untuk melakukan konfigurasi pada repository. Github SettingsGithub Settings \" Github Settings Lalu scroll ke bawah sampai bagian Github Pages, silahkan isi kolom tersebut dengan custom domain yang telah kita sewa. Github Settings DomainGithub Settings Domain \" Github Settings Domain ","date":"2021-01-01","objectID":"/custom-apex-domain-untuk-github-pages/:2:2","tags":["Domain","DNS","Github","Review"],"title":"Custom APEX Domain untuk Github Pages","uri":"/custom-apex-domain-untuk-github-pages/"},{"categories":["Blog"],"content":"DNS Management Sekarang kita menuju pada situs provider tempat kita menyewa domain (atau disebut registrar). Misalnya di sini saya menggunakan jasa dari DewaBiz.com, maka saya perlu login ke dalam member area lalu masuk ke menu DNS Management. Tambahkan beberapa record seperti berikut. DNS ManagementDNS Management \" DNS Management ","date":"2021-01-01","objectID":"/custom-apex-domain-untuk-github-pages/:3:0","tags":["Domain","DNS","Github","Review"],"title":"Custom APEX Domain untuk Github Pages","uri":"/custom-apex-domain-untuk-github-pages/"},{"categories":["Blog"],"content":"Pengujian DNS Record Untuk melakukan pengujian, kita dapat menggunakan tools bernama dig. Jalankan perintah berikut pada terminal. $ dig init.web.id +noall +answer Jika record DNS berhasil diterapkan, maka akan muncul output seperti berikut. \u003e init.web.id 3600 IN A 185.199.108.153 \u003e init.web.id 3600 IN A 185.199.109.153 \u003e init.web.id 3600 IN A 185.199.110.153 \u003e init.web.id 3600 IN A 185.199.111.153 Perhatian Setelah melakukan semua konfigurasi di atas, pada umumnya akan membutuhkan beberapa waktu sekitar 15 menit hingga record DNS berhasil diterapkan. Jika lebih dari 15 menit tetap tidak berhasil, maka lakukan clear cache pada web browser. Namun jika tetap tidak bisa, maka ada konfigurasi yang masih belum tepat. ","date":"2021-01-01","objectID":"/custom-apex-domain-untuk-github-pages/:3:1","tags":["Domain","DNS","Github","Review"],"title":"Custom APEX Domain untuk Github Pages","uri":"/custom-apex-domain-untuk-github-pages/"},{"categories":["Blog"],"content":"HTTPS Enforcement Github Pages menyediakan HTTPS gratis menggunakan Let’s Encrypt untuk meningkatkan keamanan situs web. Jika kita mengaktifkan fitur Enforce HTTPS, maka seluruh traffic akan di-rewrite menuju protokol HTTPS. ","date":"2021-01-01","objectID":"/custom-apex-domain-untuk-github-pages/:4:0","tags":["Domain","DNS","Github","Review"],"title":"Custom APEX Domain untuk Github Pages","uri":"/custom-apex-domain-untuk-github-pages/"},{"categories":["Blog"],"content":"Mengaktifkan Enforce HTTPS Masuk ke Github Settings lalu centang Enforce HTTPS Enforce HTTPSEnforce HTTPS \" Enforce HTTPS Perhatian Untuk mengaktifkan Enforce HTTPS biasanya kita perlu menunggu beberapa waktu, karena Github Pages sedang melakukan tahap verifikasi dan generate sertifikat SSL. ","date":"2021-01-01","objectID":"/custom-apex-domain-untuk-github-pages/:4:1","tags":["Domain","DNS","Github","Review"],"title":"Custom APEX Domain untuk Github Pages","uri":"/custom-apex-domain-untuk-github-pages/"},{"categories":["Blog"],"content":"Pengujian Enforce HTTPS Buka domain yang sudah kita pointing menggunakan web browser. Jika berhasil, maka akan muncul tampilan seperti berikut. Cek HTTPSCek HTTPS \" Cek HTTPS ","date":"2021-01-01","objectID":"/custom-apex-domain-untuk-github-pages/:4:2","tags":["Domain","DNS","Github","Review"],"title":"Custom APEX Domain untuk Github Pages","uri":"/custom-apex-domain-untuk-github-pages/"},{"categories":["Blog"],"content":"Kesimpulan Dengan menggunakan custom domain, maka situs web yang kita terbitkan akan terkesan lebih profesional (setidaknya ada effort lebih dalam membangunnya). Terdapat banyak provider layanan sewa domain yang ada di internet, tidak hanya DewaBiz.com, sesuaikan dengan kebutuhan kita. Selain menggunakan APEX domain / TLD, kita juga dapat menggunakan custom sub-domain seperti blog.\u003cdomain\u003e.com dengan konfigurasi yang relatif sama saja seperti di atas. ","date":"2021-01-01","objectID":"/custom-apex-domain-untuk-github-pages/:5:0","tags":["Domain","DNS","Github","Review"],"title":"Custom APEX Domain untuk Github Pages","uri":"/custom-apex-domain-untuk-github-pages/"},{"categories":["Blog"],"content":"Referensi docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site wiki.archlinux.org/index.php/Domain_name_resolution#Lookup_utilities ","date":"2021-01-01","objectID":"/custom-apex-domain-untuk-github-pages/:6:0","tags":["Domain","DNS","Github","Review"],"title":"Custom APEX Domain untuk Github Pages","uri":"/custom-apex-domain-untuk-github-pages/"},{"categories":["Automation"],"content":"Implementasi CI-CD Static Site Hugo dengan Github Actions.","date":"2020-12-19","objectID":"/continuous-deployment-hugo-dengan-github-actions/","tags":["Hugo","Github","CI-CD","Automation","Review"],"title":"Continuous Deployment Hugo dengan Github Actions","uri":"/continuous-deployment-hugo-dengan-github-actions/"},{"categories":["Automation"],"content":"Hugo adalah static site generator untuk membangun situs web statis yang database-free. Karena Hugo berjalan tanpa koneksi basis data, maka dapat digunakanlah Github Pages sebagai hosting. Dalam meningkatkan efisiensi operasionalnya, Github Actions akan menjadi solusi continuous deployment. ","date":"2020-12-19","objectID":"/continuous-deployment-hugo-dengan-github-actions/:0:0","tags":["Hugo","Github","CI-CD","Automation","Review"],"title":"Continuous Deployment Hugo dengan Github Actions","uri":"/continuous-deployment-hugo-dengan-github-actions/"},{"categories":["Automation"],"content":"Remote Repository Anggap kita sudah memiliki sebuah project situs website Hugo bernama example dengan struktur direktori seperti di bawah. Lalu kita anggap bahwa project kita telah terintegrasi dengan remote repository di Github. example ├── archetypes │ └── default.md ├── config.toml ├── content │ └── posts ├── data ├── layouts ├── resources │ └── _gen │ ├── assets │ └── images ├── static └── themes └── hugo-theme-nix ├── archetypes │ └── default.md ├── exampleSite │ ├── config.toml │ ├── content │ │ ├── about.md │ │ └── post │ │ ├── creating-a-new-theme.md │ │ ├── goisforlovers.md │ │ ├── hugoisforlovers.md │ │ └── migrate-from-jekyll.md │ └── static │ ├── favicon.ico │ └── profile.jpg ├── i18n │ ├── en.yaml │ └── es.yaml ├── images │ ├── about.png │ ├── index.png │ ├── posts.png │ ├── screenshot.png │ └── tn.png ├── layouts │ ├── 404.html │ ├── _default │ │ ├── list.html │ │ └── single.html │ ├── index.html │ └── partials │ ├── footer.html │ ├── head-custom.html │ ├── header.html │ ├── head.html │ ├── pagination.html │ └── social.html ├── LICENSE.md ├── README.md ├── static │ └── css │ └── nix.css └── theme.toml Perhatian Artikel ini tidak membahas bagaimana caranya membuat sebuah situs Hugo. Silahkan membaca dokumentasi tentang Hugo yang lebih lengkap di Hugo Documentation. Project dalam repository lokal perlu diintegrasikan dengan remote repository di Github. Remote Repository exampleRemote Repository example \" Remote Repository example Jika belum maka silahkan menjalankan perintah berikut untuk melakukan inisialisasi repository. $ git init Kemudian silahkan login akun Github dan membuat sebuah repository baru, misalnya dengan nama example. Jika sudah, kembali ke terminal dan tambahkan remote repository baru dari Github dengan perintah berikut. $ git remote add origin git@github.com:\u003cusername-github\u003e/example.git ","date":"2020-12-19","objectID":"/continuous-deployment-hugo-dengan-github-actions/:1:0","tags":["Hugo","Github","CI-CD","Automation","Review"],"title":"Continuous Deployment Hugo dengan Github Actions","uri":"/continuous-deployment-hugo-dengan-github-actions/"},{"categories":["Automation"],"content":"Github Pages Kita perlu membuat remote repository lain di Github, misalnya dengan nama blog-public. Nantinya repository baru tersebut akan menampung file-file hasil generate Hugo secara otomatis dari repository example. Remote Repository blog-publicRemote Repository \" Remote Repository blog-public Kemudian masuk ke Settings pada repository tersebut, dan aktifkan Source master pada bagian GitHub Pages Github Pages pada Repository blog-publicGithub Pages pada Repository blog-public \" Github Pages pada Repository blog-public ","date":"2020-12-19","objectID":"/continuous-deployment-hugo-dengan-github-actions/:2:0","tags":["Hugo","Github","CI-CD","Automation","Review"],"title":"Continuous Deployment Hugo dengan Github Actions","uri":"/continuous-deployment-hugo-dengan-github-actions/"},{"categories":["Automation"],"content":"Workflows Kembali ke terminal, buat sebuah direktori baru di project kita dengan nama .github lalu di dalamnya buat lagi sebuah direktori bernama workflows $ mkdir -p .github/workflows Jika sudah, di dalamnya kita buat sebuah file, misalnya bernama pages.yml dan di dalam file tersebut akan kita gunakan sebagai konfigurasi runner dari Github Actions. name:blog-publishon:push:branches:- masterjobs:deploy:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v2with:submodules:false- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:'latest'extended:true- name:Buildrun:hugo --minify --environment production- name:Deployuses:peaceiris/actions-gh-pages@v3with:external_repository:\u003cusername-github\u003e/blog-publicpublish_branch:masterpublish_dir:./publicdeploy_key:${{ secrets.ACTIONS_DEPLOY_KEYS }}allow_empty_commit:falsecommit_message:${{ github.event.head_commit.message }} ","date":"2020-12-19","objectID":"/continuous-deployment-hugo-dengan-github-actions/:3:0","tags":["Hugo","Github","CI-CD","Automation","Review"],"title":"Continuous Deployment Hugo dengan Github Actions","uri":"/continuous-deployment-hugo-dengan-github-actions/"},{"categories":["Automation"],"content":"Generate SSH Keys SSH Keys diperlukan untuk memberikan akses kepada Github Actions dalam memodifikasi repository external. $ ssh-keygen -t rsa -b 4096 -C \"\u003cemail-github@kalian.com\u003e\" -f master Nantinya akan ter-generate 2 file yaitu File master adalah private key File master.pub adalah public key ","date":"2020-12-19","objectID":"/continuous-deployment-hugo-dengan-github-actions/:3:1","tags":["Hugo","Github","CI-CD","Automation","Review"],"title":"Continuous Deployment Hugo dengan Github Actions","uri":"/continuous-deployment-hugo-dengan-github-actions/"},{"categories":["Automation"],"content":"Deploy Keys Salin public keys master.pub ke dalam clipboard dengan perintah seperti berikut $ xclip -selection clipboard \u003c master.pub Silahkan buka halaman Settings pada repository blog-public, lalu pilih Deploy keys. Tambahkan public keys dengan nama ACTIONS_DEPLOY_KEYS. Deploy keys di Repository blog-publicDeploy keys di Repository blog-public \" Deploy keys di Repository blog-public ","date":"2020-12-19","objectID":"/continuous-deployment-hugo-dengan-github-actions/:3:2","tags":["Hugo","Github","CI-CD","Automation","Review"],"title":"Continuous Deployment Hugo dengan Github Actions","uri":"/continuous-deployment-hugo-dengan-github-actions/"},{"categories":["Automation"],"content":"Secrets Salin private keys master ke dalam clipboard dengan perintah seperti berikut $ xclip -selection clipboard \u003c master Buka halaman Settings pada repository example, lalu pilih Secrets. Tambahkan secret baru dengan nama ACTIONS_DEPLOY_KEYS, berisi private key yang baru saja kita salin. Secrets di Repository exampleSecrets di Repository example \" Secrets di Repository example ","date":"2020-12-19","objectID":"/continuous-deployment-hugo-dengan-github-actions/:3:3","tags":["Hugo","Github","CI-CD","Automation","Review"],"title":"Continuous Deployment Hugo dengan Github Actions","uri":"/continuous-deployment-hugo-dengan-github-actions/"},{"categories":["Automation"],"content":"Pengujian Semua perubahan telah dilakukan pada direktori project Hugo example, sekarang kita akan melakukan pengujian apakah dengan melakukan push ke remote repository akan memberikan efek ke repository blog-public. ","date":"2020-12-19","objectID":"/continuous-deployment-hugo-dengan-github-actions/:4:0","tags":["Hugo","Github","CI-CD","Automation","Review"],"title":"Continuous Deployment Hugo dengan Github Actions","uri":"/continuous-deployment-hugo-dengan-github-actions/"},{"categories":["Automation"],"content":"Tambahkan perubahan ke staging Tambahkan seluruh file yang sudah ada di repository lokal menjadi berstatus staging. $ git add . ","date":"2020-12-19","objectID":"/continuous-deployment-hugo-dengan-github-actions/:4:1","tags":["Hugo","Github","CI-CD","Automation","Review"],"title":"Continuous Deployment Hugo dengan Github Actions","uri":"/continuous-deployment-hugo-dengan-github-actions/"},{"categories":["Automation"],"content":"Commit Sebelum melakukan commit biasanya kita perlu melakukan konfigurasi username dan email akun Github kalian. $ git config user.name \"\u003cusername-github\u003e\" $ git config user.email \"\u003cemail-github@kalian.com\u003e\" Lalu commit semua file yang berada di dalam mode staging dengan perinah berikut. $ git commit -m \"Commit Pertama Kali\" ","date":"2020-12-19","objectID":"/continuous-deployment-hugo-dengan-github-actions/:4:2","tags":["Hugo","Github","CI-CD","Automation","Review"],"title":"Continuous Deployment Hugo dengan Github Actions","uri":"/continuous-deployment-hugo-dengan-github-actions/"},{"categories":["Automation"],"content":"Push ke remote repository Jika sudah lakukan lakukan push ke remote repository Github. $ git push --set-upstream origin master Perhatian Untuk autentikasi git saat ingin melakukan push dengan SSH silahkan baca dokumentasi Github. Jika berhasil, maka seharusnya proses deployment melalui Github Actions akan langsung berjalan seperti berikut. DeploymentDeployment \" Deployment ","date":"2020-12-19","objectID":"/continuous-deployment-hugo-dengan-github-actions/:4:3","tags":["Hugo","Github","CI-CD","Automation","Review"],"title":"Continuous Deployment Hugo dengan Github Actions","uri":"/continuous-deployment-hugo-dengan-github-actions/"},{"categories":["Automation"],"content":"Hasil Berikut ini adalah hasil setelah melakukan push dan proses deployment pada Github Actions berjalan. Hasil pada Repository blog-publicHasil pada Repository blog-public \" Hasil pada Repository blog-public Terlihat bahwa Github Actions berhasil menjalankan push secara otomatis ke repository eksternal blog-public. Dan hasil build Hugo dapat kita buka pada Github Pages dengan URL berikut. https://\u003cusername-github\u003e.github.io/blog-public Hasil BuildHasil Build \" Hasil Build ","date":"2020-12-19","objectID":"/continuous-deployment-hugo-dengan-github-actions/:5:0","tags":["Hugo","Github","CI-CD","Automation","Review"],"title":"Continuous Deployment Hugo dengan Github Actions","uri":"/continuous-deployment-hugo-dengan-github-actions/"},{"categories":["Automation"],"content":"Kesimpulan Dengan penerapan CI/CD memakai Github Actions, proses penyuntingan dan berbagai hal operasional lain menjadi dipangkas. Tentu berkat implementasi konsep automation semua menjadi lebih efisien. Beberapa keuntungan yang kita peroleh adalah sebagai berikut. Tidak perlu melakukan build secara manual. Repository utama (example) dapat kita jadikan private repository. Aktivitas push hasil build Hugo dilakukan secara otomatis, tiap kali ada perubahan. ","date":"2020-12-19","objectID":"/continuous-deployment-hugo-dengan-github-actions/:6:0","tags":["Hugo","Github","CI-CD","Automation","Review"],"title":"Continuous Deployment Hugo dengan Github Actions","uri":"/continuous-deployment-hugo-dengan-github-actions/"},{"categories":["Automation"],"content":"Referensi gohugo.io/documentation docs.github.com/en/free-pro-team@latest/actions github.com/marketplace/actions/github-pages-action ","date":"2020-12-19","objectID":"/continuous-deployment-hugo-dengan-github-actions/:7:0","tags":["Hugo","Github","CI-CD","Automation","Review"],"title":"Continuous Deployment Hugo dengan Github Actions","uri":"/continuous-deployment-hugo-dengan-github-actions/"},{"categories":["GNU/Linux"],"content":"Beralih menggunakan runit - sebuah UNIX init scheme dengan service supervision.","date":"2020-12-16","objectID":"/beralih-ke-runit/","tags":["Environment","Review"],"title":"Beralih ke Runit","uri":"/beralih-ke-runit/"},{"categories":["GNU/Linux"],"content":"Runit merupakan sebuah UNIX init scheme dengan service supervision. Pada dasarnya hal ini berarti Runit mampu menyediakan automatic starting sebuah services ketika sistem operasi dijalankan untuk pertamakali, serta automatic monitoring and restarting sebuah service jika terjadi sebuah interupsi. ","date":"2020-12-16","objectID":"/beralih-ke-runit/:0:0","tags":["Environment","Review"],"title":"Beralih ke Runit","uri":"/beralih-ke-runit/"},{"categories":["GNU/Linux"],"content":"Systemd vs Runit Ketika artikel ini diterbitkan, systemd nyaris menguasai semua distro sistem operasi GNU/Linux. Misalnya Fedora, Debian, Ubuntu, dan banyak lagi lainnya sudah beralih dari init system sebelumnya lalu menggunakan systemd. Hal ini terjadi karena systemd menawarkan banyak hal yang terintegrasi, hampir segala hal pada sistem operasi akan di-handle olehnya. Systemd and GNU/LinuxSystemd and GNU/Linux \" Systemd and GNU/Linux ","date":"2020-12-16","objectID":"/beralih-ke-runit/:1:0","tags":["Environment","Review"],"title":"Beralih ke Runit","uri":"/beralih-ke-runit/"},{"categories":["GNU/Linux"],"content":"Kontroversi systemd systemd memang menjadi kontroversi karena beberapa hal. Sebagian orang menganggap bahwa systemd tidak menghormati filosofi Unix. Saya ingat ketika awal sekali mengenal GNU/Linux, bahwa GNU/Linux adalah sistem operasi yang Unix-like dan Unix memiliki filosofi sebagai berikut : Tugas sebuah program adalah melakukan satu hal, dan melakukannya dengan baik. Sistem yang besar dan kompleks merupakan gabungan dari program-program kecil yang bekerja sama. Teks adalah antarmuka yang universal. Segala hal di Unix adalah file. systemd dianggap tidak conform dengan filosofi Unix diatas sehingga banyak yang menolaknya. systemd awalnya dikembangkan oleh Lennart Pottering, seorang developer yang saat artikel ini diterbitkan tengah bekerja untuk Red Hat. Dia sebelumnya juga membuat program yang tak kalah kontroversial yaitu Avahi dan PulseAudio. Silahkan baca tentang Lennart Pottering di Wikipedia. Beberapa kritik lain terhadap systemd misalnya karena systemd tidak hanya menjadi init system tapi juga mengambil ali banyak fungsi. Misalnya systemd berusaha mengatur network, cron, fstab, syslog atau rsyslog, ntp, dan banyak lainnya. Artinya systemd bukanlah sebuah program yang melakukan satu hal saja, tapi banyak hal. Kemudian, systemd dikritik karena logging file-nya tidak berbasis teks seperti Unix dan GNU/Linux pada umumnya, melainkan binary log file. ","date":"2020-12-16","objectID":"/beralih-ke-runit/:1:1","tags":["Environment","Review"],"title":"Beralih ke Runit","uri":"/beralih-ke-runit/"},{"categories":["GNU/Linux"],"content":"Runit Sebagai Alternatif Berbagai penolakan tentu saja terjadi, tidak sedikit developer yang kemudian melakukan fork lalu mengembangkan distro GNU/Linux yang bebas dari systemd. Misalnya Artix Linux, yang merupakan fork dari project Arch Linux dengan maksud membebaskan pengguna Arch dari cengkeraman systemd. Artix menawarkan beberapa alternatif sebagai pengganti systemd, misalnya OpenRC, S6, dan tentu saja Runit. /etc/runit/sv/foo ├── log │ ├── run │ └── supervise │ ├── control │ ├── lock │ ├── ok │ ├── pid │ ├── stat │ └── status ├── run └── supervise ├── control ├── lock ├── ok ├── pid ├── stat └── status Pada distro Artix, biasanya direktori sebuah service akan terlihat seperti di atas. Anggaplah /etc/runit/sv adalah templatedir, dan /etc/runit/sv/foo adalah direktori konfigurasi service. Maka kelak service yang berjalan akan bernama sebagai foo juga. Dalam direktori foo biasanya kita hanya diwajibkan untuk membuat sebuah file executable bernama run, berisikan baris perintah untuk mengeksekusi program yang akan dijadikan sebagai sebuah service. Namun jika kita membutuhkan logging, kita dapat memanfaatkan svlogd dengan membuat sebuah direktori bernama log di dalam /etc/runit/sv/foo, kemudian buat lagi sebuah file bernama run di dalam direktori log tersebut. Isi dari file-file run tersebut akan kita bahas dibawah. ","date":"2020-12-16","objectID":"/beralih-ke-runit/:1:2","tags":["Environment","Review"],"title":"Beralih ke Runit","uri":"/beralih-ke-runit/"},{"categories":["GNU/Linux"],"content":"Beralih ke Runit Dalam dokumentasi ini kita akan belajar tentang : Membuat sebuah runit template untuk untuk konfigurasi monitored service. Konfigurasi monitored service untuk pertamakali. Mengelola monitored service secara manual. runit svrunit sv \" runit sv ","date":"2020-12-16","objectID":"/beralih-ke-runit/:2:0","tags":["Environment","Review"],"title":"Beralih ke Runit","uri":"/beralih-ke-runit/"},{"categories":["GNU/Linux"],"content":"0. Prerequisites Pastikan paket dari runit sudah terpasang pada sistem. Sebagian besar distro GNU/Linux biasanya memiliki paket tersebut pada repository mereka. Misalnya, jika kita menggunakan sebuah distro Arch-based maka kita dapat memasang paket dengan perintah berikut. $ sudo pacman -Sy runit Perhatian Pada distro Artix biasanya kita tidak perlu melakukan pemasangan paket Runit. Kita diperkenankan memilih init system apa yang akan digunakan pada waktu mengunduh berkas ISO installer. Periksa apakah runit telah terpasang pada sistem, dengan mencari sebuah process bernama runsvdir dengan perintah. $ sudo ps -ef | grep runsvdir Jika runit telah terpasang, harusnya akan keluar output seperti berikut. root 1090 1 0 Dec15 ? 00:00:00 runsvdir -P /run/runit/service log:.............. Di sini runsvdir merupakan hal paling pertama dari beberapa lainnya yang akan kita pahami. runit memang diarancang untuk mengambil pendekatan yang terasa sangat Unixy, yaitu dengan cara memecah fungsionalitas utama menjadi beberapa utilities kecil yang masing-masing unitnya bertanggung jawab menjalankan sebuah tugas. Pendekatan tersebut membuat komponen-komponen kecilnya mampu dibentuk dengan beberapa metode sesuai dengan yang kita butuhkan. Core unit yang terdapat pada runit beberapa diantaranya adalah runsvdir, runsv, chpst, svlogd, dan sv. Nantinya, dalam dokumentasi ini kita akan mengkombinasikan beberapa hal diatas untuk kofigurasi runit dan menjalankan sebuah managed service. ","date":"2020-12-16","objectID":"/beralih-ke-runit/:2:1","tags":["Environment","Review"],"title":"Beralih ke Runit","uri":"/beralih-ke-runit/"},{"categories":["GNU/Linux"],"content":"1. Membuat sebuah Template Hal pertama yang perlu kita lakukan adalah memperhatikan lebih dalam apa yang sebenarnya terjadi pada output runsvdir -P /run/runit/service log:...... Pada dasarnya, dalam output tersebut terdapat sebuah perintah yang mengawasi direktori /run/runit/service, karena di dalamnya terdapat file konfigurasi dari monitored service. Sebuah monitored service dikonfigurasi dengan menambahkan sebuah subdirektori ke dalam /run/runit/service berisikan sebuah berkas script run di dalamnya. Ketika runsvdir menemukan sebuah konfigurasi baru, maka ia akan menjalankan process runsvbaru untuk mengelola service. Ingat, bahwa salah satu Filosofi Unix berbunyi tugas sebuah program adalah melakukan satu hal, dan melakukannya dengan baik. Pastikan bahwa direktori /etc/runit/sv/ ada. Di dalamnya kita akan membuat direktori baru bernama foo. $ sudo mkdir -p /etc/runit/sv/foo Lalu di dalam direktori tersebut kita buat sebuah file template bernama run untuk ilustrasi. #!/bin/sh exec 2\u003e\u00261 exec chpst -u foo /opt/example/foo-service.sh Jangan lupa file run harus menjadi executable dengan cara berikut. $ sudo chmod +x /etc/runit/sv/foo/run Script run di atas akan mengeksekusi script foo-service.sh yang nantinya akan kita buat di dalam direktori /opt/example. Terdapat juga chpst yang berfungsi agar nantinya eksekusi akan dijalankan oleh user bernama foo, kita akan buat juga usernya nanti. Runit menawarkan svlogd untuk mengelola logfile dari sebuah service, kita akan mencoba membuatnya juga. Mari buat direktori baru bernama log. $ sudo mkdir /etc/runit/sv/foo/log Di dalam direktori tersebut, kita akan membuat file baru lagi bernama run berisikan script berikut. #!/bin/sh exec chpst -u foo svlogd -tt /var/log/foo Pada script diatas svlogd akan menghasilkan output dari template yang sebelumnya kita buat. Output yang muncul akan ditampung pada direktori /var/log/foo yang kita buat nanti. ","date":"2020-12-16","objectID":"/beralih-ke-runit/:2:2","tags":["Environment","Review"],"title":"Beralih ke Runit","uri":"/beralih-ke-runit/"},{"categories":["GNU/Linux"],"content":"2. Menyiapkan Logging Directory Buat sebuah direktori untuk menampung log dari service. $ sudo mkdir -p /var/log/foo Lalu kita membutuhkan user baru bernama foo sebagai ilustrasi. $ sudo useradd foo Direktori log seharusnya menjadi milik user foo supaya user tersebut mampu menulis di dalamnya, sehingga kita perlu merubah kepemilikannya dengan perintah berikut. $ sudo chown foo:foo /var/log/foo ","date":"2020-12-16","objectID":"/beralih-ke-runit/:2:3","tags":["Environment","Review"],"title":"Beralih ke Runit","uri":"/beralih-ke-runit/"},{"categories":["GNU/Linux"],"content":"3. Membuat Program Ilustrasi Buat sebuah direktori baru untuk meletakkan file program ilustrasi. $ sudo mkdir -p /opt/example Dari sini kita akan melanjutkan dengan membuat program sebagai ilustrasi bernama foo-service.sh yang terletak pada direktori /opt/example. #!/bin/bash echo \"Menjalankan service...\" for i in {1..30} do echo \"Melakukan sesuatu...\" sleep 1 done echo \"Oh tidak, program crash!\" \u003e\u00262 exit 1 Jangan lupa untuk menjadikan file tersebut executable seperti berikut. $ sudo chmod +x /opt/example/foo-script.sh Kemudian jadikan direktori serta file di dalamnya menjadi milik user foo. $ sudo chown -R foo:foo /opt/example Program foo-script.sh akan mensimulasikan sebuah process yang dieksekusi menggunakan runit sesuai dengan template yang sebelumnya telah kita buat. foo-script.sh akan crash setiap 30 detik, dan setiap output nya akan dicatat ke dalam log. ","date":"2020-12-16","objectID":"/beralih-ke-runit/:2:4","tags":["Environment","Review"],"title":"Beralih ke Runit","uri":"/beralih-ke-runit/"},{"categories":["GNU/Linux"],"content":"4. Mengelola Service Kita tiba pada tahap menggunakan sv untuk pengelolaan service dari ilustrasi yang telah kita buat sebelumnya. Untuk menjalankan service kita perlu melakukan symlink direktori template ke dalam direktori runsvdir. Enable service $ sudo ln -s /etc/runit/sv/foo /run/runit/service Ketika melakukan perintah ln -s diatas, direktori template dari service tersebut (/etc/runit/sv/foo) akan dijadikan sebagai titik link yang ditambahkan ke dalam direktori runsvdir pada /run/runit/service. Lalu runsvdir terus melakukan pengawasan pada service yang baru saja kita tambahkan. Sehingga pada saat process terinterupsi (misalnya oleh reboot atau kill) maka service tersebut akan kembali dinyalakan secara otomatis. Itulah yang dimaksud dengan supervision di dalam sebuah sistem init. Memeriksa status service Kemudian lakukan pemeriksaan, apakah service berhasil dijalankan. $ sudo sv status /run/runit/service/foo Jika berhasil, seharusnya akan keluar output seperti berikut. run: foo: (pid 16998) 3s; run: log: (pid 16997) 3s Menghentikan service Coba hentikan service dengan perintah berikut. $ sudo sv down /run/runit/service/foo Jika berhasil dihentikan, maka akan keluar output seperti berikut. ok: down: example: 1s, normally up Menyalakan service Nyalakan lagi kemudian periksa lagi statusnya dengan perintah seperti berikut ini. $ sudo sv up /run/runit/service/foo $ sudo sv status /run/runit/service/foo Jika berhasil berjalan, maka akan muncul output sebagai berikut. run: foo: (pid 18146) 16s; run: log: (pid 16997) 250s Melihat logfile Sekarang kita akan coba melihat apakah logging berhasil dilakukan. $ sudo tail -f /var/log/foo/current svlogd akan membuat sebuah file baru bernama current dalam direktori log yang sudah kita siapkan. Nantinya file tersebut akan menampung tiap output dari service yang sedang berjalan. Apabila berhasil, seharusnya akan muncul output seperti berikut. 2020-12-16_17:38:43.31313 Melakukan sesuatu... 2020-12-16_17:38:44.31422 Melakukan sesuatu... 2020-12-16_17:38:45.31513 Melakukan sesuatu... 2020-12-16_17:39:13.34046 Oh tidak, program crash! 2020-12-16_17:39:13.34372 Menjalankan service... 2020-12-16_17:39:13.34375 Melakukan sesuatu... 2020-12-16_17:39:14.34453 Melakukan sesuatu... 2020-12-16_17:39:15.34541 Melakukan sesuatu... Terlihat seperti diatas, bahwa program foo-script.sh berhasil dijalankan, berhenti setiap 30 detik, kemudian runit akan berusaha menyalakannya lagi. Tidak terbatas seperti tail -f saja, namun svlogd mampu melakukan log rotation otomatis layaknya logrotate, bahkan svlogd mampu melakukannya tanpa perlu mematikan service terlebih dahulu. Disable service Untuk menghilangkan sebuah service dari runsvdir kita perlu menghapus symlink yang sebelumnya kita buat. $ sudo unlink /run/runit/service/example Setelah dihapus, maka service akan berhenti seketika dan tidak akan dimuat ketika sistem operasi booting. ","date":"2020-12-16","objectID":"/beralih-ke-runit/:2:5","tags":["Environment","Review"],"title":"Beralih ke Runit","uri":"/beralih-ke-runit/"},{"categories":["GNU/Linux"],"content":"Perbandingan Perintah Runit vs Systemd Systemd memang memiliki lebih banyak perintah daripada Runit, namun jika dibandingkan maka berikut ini adalah beberapa perintah yang umum digunakan dalam mengelola service dari kedua init system tersebut. Usage Systemd Runit Menjalankan service systemctl start \u003cservice\u003e sv up \u003cservice\u003e Mematikan service systemctl stop \u003cservice\u003e sv down \u003cservice\u003e Menyalakan ulang service systemctl restart \u003cservice\u003e sv restart \u003cservice\u003e Enable service at boot systemctl enable \u003cservice\u003e ln -s /etc/runit/sv/\u003ctemplate dir\u003e /run/runit/\u003crunsvdir\u003e Disable service from boot systemctl disable \u003cservice\u003e unlink /run/runit/\u003crunsvdir\u003e/\u003cservice\u003e ","date":"2020-12-16","objectID":"/beralih-ke-runit/:3:0","tags":["Environment","Review"],"title":"Beralih ke Runit","uri":"/beralih-ke-runit/"},{"categories":["GNU/Linux"],"content":"Manakah yang lebih baik? Dalam pekerjaan, systemd tetap digunakan pada server-server customer yang saya jumpai. Tidak ada masalah bagi saya, karena itulah prosedur yang diterapkan di perusahaan-perusaahan tersebut. Tentu sebuah server yang berada dalam skala production membutuhkan stabilitas tinggi, nyaris semua yang saya kelola menggunakan berbagai platform dari Red Hat. Dan RHEL (Red Hat Enterprise Linux) sendiri adalah salah satu distro GNU/Linux yang paling bergantung pada systemd. Saya mengakui bahwa systemd adalah sistem yang modern. Yang menurut saya kurang adalah sistem logging dengan journald, file log yang dihasilkan bukanlah textfile. Sebelumnya, dengan rsyslog kita bebas memakai beragam tool seperti cat, grep, tail, atau head. Tetapi dengan journald kita dibatasi hanya bisa menggunakan satu tool yaitu journalctl. Untuk pemakaian di komputer pribadi, tentu saja saya lebih prefer menggunakan Runit. Bukan tanpa alasan, runit mengkonsumsi resouce (seperti RAM dan CPU) yang relatif lebih sedikit daripada systemd. Dependency yang digunakan oleh runit juga tidak sebanyak systemd, berarti runit juga lebih ramah dalam urusan penggunaan storage. Untuk kecepatan, saya berani mengadu kecepatan antara runit melawan systemd, karena telah memiliki pengalaman pribadi bahwa runit menang telak! Runit membuat sistem operasi saya booting lebih cepat daripada systemd. Terlepas dari semua itu, saya juga belum membutuhkan systemd dengan segala bloated features nya untuk urusan pribadi (itu terlalu berlebihan, saya bahkan tidak pernah menggunakan itu semua secara keseluruhan), yang saya perlukan pada komputer pribadi adalah program dapat berjalan sesuai dengan yang saya kehendaki. Sehingga saya menyimpulkan bahwa runit layak dijadikan sebagai alternatif. ","date":"2020-12-16","objectID":"/beralih-ke-runit/:4:0","tags":["Environment","Review"],"title":"Beralih ke Runit","uri":"/beralih-ke-runit/"},{"categories":["GNU/Linux"],"content":"Referensi smarden.org/runit devnull.web.id/debian/pengenalan-systemd.html kchard.github.io/runit-quickstart ihatesystemd.com wiki.gentoo.org/wiki/Comparison_of_init_systems wiki.archlinux.org/index.php/init ","date":"2020-12-16","objectID":"/beralih-ke-runit/:5:0","tags":["Environment","Review"],"title":"Beralih ke Runit","uri":"/beralih-ke-runit/"},{"categories":["GNU/Linux"],"content":"Berbicara sedikit tentang GNU/Linux Ricing - Kebebasan dalam membangun environment desktop ramah sumberdaya dan sesuai kebutuhan","date":"2020-12-14","objectID":"/membahas-linux-ricing/","tags":["Customization","Tweaks","Environment"],"title":"Membahas Linux Ricing","uri":"/membahas-linux-ricing/"},{"categories":["GNU/Linux"],"content":"Istilah rice/ricing pasti tidak asing lagi bagi orang yang suka mengkustomisasi desktop sistem operasi Unix-like, khususnya pada GNU/Linux yang aktivitasnya biasa disebut “Ricing / Linux Rice”. Mereka gemar berdiskusi di komunitas reddit dan grup Linuxer Desktop Art di Facebook, serta grup Dotfiles Indonesia di Telegram untuk sharing atau hanya sekedar melihat-lihat indahnya sistem operasi unix-like. Arch-ChanArch-Chan \" Arch-Chan ","date":"2020-12-14","objectID":"/membahas-linux-ricing/:0:0","tags":["Customization","Tweaks","Environment"],"title":"Membahas Linux Ricing","uri":"/membahas-linux-ricing/"},{"categories":["GNU/Linux"],"content":"Pengenalan “Linux Rice” Pertama-tama saya akan sedikit menjelaskan mengenai apa yang disebut “Linux Rice”. Linux Rice berasal dari 2 kata “Linux” yaitu sistem operasi GNU/Linux itu sendiri dan “Rice” yaitu beras. Bukan! yang dimaksud “Rice” disini bukanlah beras yang biasa kita makan, tapi akronim dari “Race Inspired Cosmetic Enhancements”. Race Inspired Cosmetic Enhancements. (R.I.C.E.) adalah istilah yang merujuk pada mobil sport buatan Asia (biasanya Honda Civic) yang memiliki banyak modifikasi kosmetik dan sedikit atau tanpa modifikasi internal. Intinya disini kata “Rice” awalnya digunakan untuk modifikasi pada mobil. Race Inspired Cosmetic Enhancements (R.I.C.E.)Race Inspired Cosmetic Enhancements (R.A.C.E.) \" Race Inspired Cosmetic Enhancements (R.I.C.E.) Apa hubungannya modifikasi mobil dengan sistem operasi GNU/Linux? Dari sini jelas bahwa kata “Rice” artinya modifikasi, kemudian istilah tersebut diserap oleh mereka yang gemar memodifikasi tampilan desktop di sistem operasi GNU/Linux menjadi “Ricing”. ","date":"2020-12-14","objectID":"/membahas-linux-ricing/:1:0","tags":["Customization","Tweaks","Environment"],"title":"Membahas Linux Ricing","uri":"/membahas-linux-ricing/"},{"categories":["GNU/Linux"],"content":"Komponen dasar dalam Ricing Ada banyak sekali cara untuk mengkustomisasi desktop di sistem operasi GNU/Linux. Dimulai dari pengenalan sebuah Window Manager atau disingkat WM. ","date":"2020-12-14","objectID":"/membahas-linux-ricing/:2:0","tags":["Customization","Tweaks","Environment"],"title":"Membahas Linux Ricing","uri":"/membahas-linux-ricing/"},{"categories":["GNU/Linux"],"content":"Window Manager Window Manager adalah sistem perangkat lunak yang mengontrol tata letak dan tampilan window dalam sistem windowing yang merupakan salah satu dari komponen Desktop Environment pada GUI. WM sendiri dibagi menjadi 3 jenis. Stacking adalah Window Manager yang sistem window-nya bertumpuk antara satu dengan yang lain. Kita biasa merasakan workflow WM jenis ini misalnya pada DE GNOME3 yang menggunakan Mutter dan KDE yang menggunakan Kwin. Namun tidak semua WM dapat berdiri sendiri (standalone) contoh yang WM yang dapat berdiri sendiri dengan mudahnya adalah openbox, fluxbox, hingga xfwm pada DE XFCE. Tiling adalah Window Manager yang sistem window-nya tersusun kotak-kotak antara satu dengan lainnya secara otomatis meskipun masih terdapat sistem floating/stacking, disebut tiling karena memiliki workflow seperti susunan ubin. Contohnya i3wm, dan bspwm. Dynamic. Seperti pada namanya, jenis Window Manager ini dapat berganti-ganti diantara Stacking maupun Tiling sesuai selera pengguna. Contohnya dwm dan awesomewm. ","date":"2020-12-14","objectID":"/membahas-linux-ricing/:2:1","tags":["Customization","Tweaks","Environment"],"title":"Membahas Linux Ricing","uri":"/membahas-linux-ricing/"},{"categories":["GNU/Linux"],"content":"Panel / Bar / Dock Panel / Bar / Dock adalah program yang digunakan untuk menampilkan informasi baterai, daftar aplikasi yang dibuka, system tray, dan waktu. Jika pada sistem operasi Micros*ft Wind*ws, kita biasa menyebutnya Taskbar. Di GNU/Linux contohnya adalah plank, tint2, polybar, dzen2, dan lemonbar. ","date":"2020-12-14","objectID":"/membahas-linux-ricing/:2:2","tags":["Customization","Tweaks","Environment"],"title":"Membahas Linux Ricing","uri":"/membahas-linux-ricing/"},{"categories":["GNU/Linux"],"content":"Application Launcher Application Launcher adalah program yang digunakan untuk membuka atau menjalankan suatu program selain menggunakan Terminal Emulator. Contohnya adalah dmenu lalu ada penggantinya yang lebih menawarkan banyak fitur, yaitu rofi. ","date":"2020-12-14","objectID":"/membahas-linux-ricing/:2:3","tags":["Customization","Tweaks","Environment"],"title":"Membahas Linux Ricing","uri":"/membahas-linux-ricing/"},{"categories":["GNU/Linux"],"content":"Notification Daemon Notification Daemon (lebih suka saya sebut sebagai Notify Daemon) adalah program yang digunakan sebagai penampil notifikasi. Contohnya adalah dunst, xfce4-notifyd milik XFCE, dll. ","date":"2020-12-14","objectID":"/membahas-linux-ricing/:2:4","tags":["Customization","Tweaks","Environment"],"title":"Membahas Linux Ricing","uri":"/membahas-linux-ricing/"},{"categories":["GNU/Linux"],"content":"Terminal Emulator Terminal Emulator adalah program yang digunakan untuk berinteraksi dengan sesi Unix Shell seperti mengatur sistem, hingga menjalankan program, dengan mengetikkan perintah berbasis teks (CLI). TE merupakan komponen terpenting digunakan untuk Ricing. Contoh Terminal Emulator ada banyak sekali, misalnya rxvt-unicode (urxvt), xfce4-terminal pada XFCE, termite, simple terminal (st), kitty, dan masih banyak lagi. ","date":"2020-12-14","objectID":"/membahas-linux-ricing/:2:5","tags":["Customization","Tweaks","Environment"],"title":"Membahas Linux Ricing","uri":"/membahas-linux-ricing/"},{"categories":["GNU/Linux"],"content":"Display Manager (Optional) Display Manager atau DM adalah program yang digunakan untuk masuk ke sesi GUI bagi sistem operasi GNU/Linux. Setelah masuk ke DM, kendali sepenuhnya diberikan kepada WM. DM menyediakan fitur seperti memilih sesi DE/WM yang akan digunakan, serta terdapat juga fitur reboot, halt, dan suspend. Meski sering digunakan karena kemudahannya bagi pengguna, tetapi tidak sedikit pula orang yang menggunakan sistem operasi GNU/Linux tanpa DM. Biasanya mereka menggunakan startx langsung (xorg-xinit). Contoh DM adalah lightdm, gdm milik GNOME, dan slim. ","date":"2020-12-14","objectID":"/membahas-linux-ricing/:2:6","tags":["Customization","Tweaks","Environment"],"title":"Membahas Linux Ricing","uri":"/membahas-linux-ricing/"},{"categories":["GNU/Linux"],"content":"Window Compositor (Optional) Compositor adalah program yang berfungsi untuk mengatur animasi seperti bayangan dan tranparansi pada WM. Contohnya adalah compton, lalu penerusnya yaitu picom. ","date":"2020-12-14","objectID":"/membahas-linux-ricing/:2:7","tags":["Customization","Tweaks","Environment"],"title":"Membahas Linux Ricing","uri":"/membahas-linux-ricing/"},{"categories":["GNU/Linux"],"content":"Alasan memilih WM daripada DE Dari semua penjelasan diatas, mengapa saya lebih memilih WM dengan custom environment, daripada DE yang sudah lengkap (instant) tinggal digunakan? Seringkali banyak yang bilang Ribet sekali jadi orang! Ada beberapa alasan mengapa menggunakan WM lebih baik daripada menggunakan DE (menurut saya). Ingin belajar lebih dalam mengenai workflow desktop pada sistem operasi GNU/Linux. Mengetahui bahwa GUI pada sistem operasi GNU/Linux dapat diminimalisir komponen-komponen penyusunnya (dependencies), karena banyak sekali komponen yang tidak pernah saya perlukan pada DE namun sudah pre-installed. Dengan alasan nomor 2 jelas sekali bahwa WM akan sangat ringan dan tidak menyita banyak resources seperti RAM dan processor. Kebebasan memilih komponen penyusun desktop seperti yang saya sudah jelaskan di atas. System Monitoringhtop \" System Monitoring ","date":"2020-12-14","objectID":"/membahas-linux-ricing/:3:0","tags":["Customization","Tweaks","Environment"],"title":"Membahas Linux Ricing","uri":"/membahas-linux-ricing/"},{"categories":["GNU/Linux"],"content":"Apa yang saya gunakan? Karena saya masih terbiasa dengan WM jenis stacking yang terkesan normal, serta dikarenakan resolusi layar minim (1600 x 900). Berbeda dengan WM tiling yang lebih dioptimalkan untuk developer dengan layar lebarnya. Saya memutuskan memilih openbox dengan segala kesederhanaanya serta dukungan yang luas. ","date":"2020-12-14","objectID":"/membahas-linux-ricing/:4:0","tags":["Customization","Tweaks","Environment"],"title":"Membahas Linux Ricing","uri":"/membahas-linux-ricing/"},{"categories":["GNU/Linux"],"content":"Penutup Cukup rumit dan membingungkan bukan? Bagi pemula biasanya akan lebih mudah untuk memulai dari menggunakan dotfiles milik orang lain. Dengan begitu kita tidak terlalu banyak melakukan konfigurasi dari dasar, dan tidak perlu membuat theme, icon hingga artwork sendiri. Setelah merasa cukup familiar dengan environment tersebut barulah mencoba membangun environment kalian sendiri. Jika sudah merasa mampu menyusun dokumentasi environment dengan baik, maka lanjutkan belajar membuat dotfiles sendiri. Selama proses belajar, tak perlu malu untuk berbagi screenshot ke komunitas seperti Linuxer Desktop Art, atau Dotfiles Indonesia untuk meminta pendapat dari sesama pegiat Desktop Ricing. ","date":"2020-12-14","objectID":"/membahas-linux-ricing/:5:0","tags":["Customization","Tweaks","Environment"],"title":"Membahas Linux Ricing","uri":"/membahas-linux-ricing/"},{"categories":["GNU/Linux"],"content":"Referensi 0xlt.me dwarmstrong.org/openbox devpy.me/your-guide-to-a-comfortable-linux-desktop-with-openbox openbox.org addy-dclxvi.github.io bandithijo.github.io wiki.archlinux.org/Desktop_environment Linuxer Desktop Art Dotfiles Indonesia ","date":"2020-12-14","objectID":"/membahas-linux-ricing/:6:0","tags":["Customization","Tweaks","Environment"],"title":"Membahas Linux Ricing","uri":"/membahas-linux-ricing/"},{"categories":["Blog"],"content":"This article shows the basic Markdown syntax and format.","date":"2020-12-12","objectID":"/basic-markdown-syntax/","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"This initial article offers a sample of basic Markdown syntax that can be used in Hugo content files. In the future, this article will be the basic guide in writing the other posts on this blog. Note This article is a shameful copy of the great Grav original page. Let’s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages. Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it. Some of the key benefits are: Markdown is simple to learn, with minimal extra characters, so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use! John Gruber, the author of Markdown, puts it like this: The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. – John Gruber Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like! Tip  Bookmark this page for easy future reference! ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:0:0","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"1 Headings Headings from h2 through h6 are constructed with a # for each level: ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading The HTML looks like this: \u003ch2\u003eh2 Heading\u003c/h2\u003e \u003ch3\u003eh3 Heading\u003c/h3\u003e \u003ch4\u003eh4 Heading\u003c/h4\u003e \u003ch5\u003eh5 Heading\u003c/h5\u003e \u003ch6\u003eh6 Heading\u003c/h6\u003e Heading IDs To add a custom heading ID, enclose the custom ID in curly braces on the same line as the heading: ### A Great Heading {#custom-id} The HTML looks like this: \u003ch3 id=\"custom-id\"\u003eA Great Heading\u003c/h3\u003e ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:1:0","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"2 Comments Comments should be HTML compatible. \u003c!-- This is a comment --\u003e Comment below should NOT be seen: ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:2:0","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"3 Horizontal Rules The HTML \u003chr\u003e element is for creating a “thematic break” between paragraph-level elements. In Markdown, you can create a \u003chr\u003e with any of the following: ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks The rendered output looks like this: ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:3:0","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"4 Body Copy Body copy written as normal, plain text will be wrapped with \u003cp\u003e\u003c/p\u003e tags in the rendered HTML. So this body copy: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. The HTML looks like this: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e A line break can be done with one blank line. ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:4:0","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"5 Inline HTML If you need a certain HTML tag (with a class) you can simply use HTML: Paragraph in Markdown. \u003cdiv class=\"class\"\u003e This is \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Paragraph in Markdown. ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:5:0","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"6 Emphasis ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:6:0","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"Bold For emphasizing a snippet of text with a heavier font-weight. The following snippet of text is rendered as bold text. **rendered as bold text** __rendered as bold text__ The HTML looks like this: \u003cstrong\u003erendered as bold text\u003c/strong\u003e ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:6:1","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"Italics For emphasizing a snippet of text with italics. The following snippet of text is rendered as italicized text. *rendered as italicized text* _rendered as italicized text_ The HTML looks like this: \u003cem\u003erendered as italicized text\u003c/em\u003e ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:6:2","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"Strikethrough In GFMGitHub flavored Markdown you can do strikethroughs. ~~Strike through this text.~~ The rendered output looks like this: Strike through this text. The HTML looks like this: \u003cdel\u003eStrike through this text.\u003c/del\u003e ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:6:3","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"Combination Bold, italics, and strikethrough can be used in combination. ***bold and italics*** ~~**strikethrough and bold**~~ ~~*strikethrough and italics*~~ ~~***bold, italics and strikethrough***~~ The rendered output looks like this: bold and italics strikethrough and bold strikethrough and italics bold, italics and strikethrough The HTML looks like this: \u003cem\u003e\u003cstrong\u003ebold and italics\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003estrikethrough and bold\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003estrikethrough and italics\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003ebold, italics and strikethrough\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:6:4","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"7 Blockquotes For quoting blocks of content from another source within your document. Add \u003e before any text you want to quote: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The rendered output looks like this: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The HTML looks like this: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e Blockquotes can also be nested: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. The rendered output looks like this: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:7:0","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"8 Lists ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:8:0","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"Unordered A list of items in which the order of the items does not explicitly matter. You may use any of the following symbols to denote bullets for each list item: * valid bullet - valid bullet + valid bullet For example: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:8:1","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"Ordered A list of items in which the order of items does explicitly matter. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e Tip If you just use 1. for each number, Markdown will automatically number each item. For example: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:8:2","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"Task Lists Task lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) before task list items. To select a checkbox, add an x in between the brackets ([x]). The rendered output looks like this: Write the press release Update the website Contact the media ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:8:3","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"9 Code ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:9:0","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"Inline Code Wrap inline snippets of code with `. In this example, `\u003csection\u003e\u003c/section\u003e` should be wrapped as **code**. The rendered output looks like this: In this example, \u003csection\u003e\u003c/section\u003e should be wrapped as code. The HTML looks like this: \u003cp\u003e In this example, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e should be wrapped with \u003cstrong\u003ecode\u003c/strong\u003e. \u003c/p\u003e ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:9:1","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"Indented Code Or indent several lines of code by at least four spaces, as in: // Some comments line 1 of code line 2 of code line 3 of code The rendered output looks like this: // Some comments line 1 of code line 2 of code line 3 of code The HTML looks like this: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:9:2","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"Block Fenced Code Use “fences” ``` to block in multiple lines of code with a language attribute. ```markdown Sample text here... ``` The HTML looks like this: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:9:3","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"Syntax Highlighting GFMGitHub Flavored Markdown also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code “fence”, ```js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` The rendered output looks like this: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Note Syntax highlighting page in Hugo Docs introduces more about syntax highlighting, including highlight shortcode. ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:9:4","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"10 Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. The HTML looks like this: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e Right or center aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column. Adding colons on both sides of the dashes below any heading will center align text for that column. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:10:0","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"11 Links ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:11:0","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"Basic Link \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) The rendered output looks like this (hover over the link, there is no tooltip): https://assemble.io contact@revolunet.com Assemble The HTML looks like this: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:11:1","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"Add a Title [Upstage](https://github.com/upstage/ \"Visit Upstage!\") The rendered output looks like this (hover over the link, there should be a tooltip): Upstage The HTML looks like this: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:11:2","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. Note The specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works. ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:11:3","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"12 Footnotes Footnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page. To create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially. Add the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables. This is a digital footnote[^1]. This is a footnote with \"label\"[^label] [^1]: This is a digital footnote [^label]: This is a footnote with \"label\" This is a digital footnote1. This is a footnote with “label”2 ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:12:0","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Blog"],"content":"13 Images Images have a similar syntax to links but include a preceding exclamation point. ![Minion](https://octodex.github.com/images/minion.png) or: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The StormtroopocatAlt text \" The Stormtroopocat Like links, images also have a footnote style syntax: ![Alt text][id] The DojocatAlt text \" The Dojocat With a reference later in the document defining the URL location: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" This is a digital footnote ↩︎ This is a footnote with “label” ↩︎ ","date":"2020-12-12","objectID":"/basic-markdown-syntax/:13:0","tags":["Documentation","Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"}]